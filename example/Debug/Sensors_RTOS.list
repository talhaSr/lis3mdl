
Sensors_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007ad8  08007ad8  00017ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b60  08007b60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b68  08007b68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b68  08007b68  00017b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b6c  08007b6c  00017b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a40  20000010  08007b80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a50  08007b80  00024a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a944  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003393  00000000  00000000  0003a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0003f230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d7a  00000000  00000000  00040618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184d0  00000000  00000000  00062392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d465f  00000000  00000000  0007a862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014eec1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  0014ef14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ac0 	.word	0x08007ac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007ac0 	.word	0x08007ac0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LIS3MDL_Init>:
static HAL_StatusTypeDef readByte(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t register_addr, uint8_t *data);
static HAL_StatusTypeDef readMultiBytes(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t register_addr, uint8_t *data, uint16_t count);

/* Sensor Functions */
LIS3MDL_Result_t LIS3MDL_Init(LIS3MDL_t *hsensor, I2C_HandleTypeDef *hi2c, LIS3MDL_Device_t dev, LIS3MDL_Scale_t scale, LIS3MDL_OperationMode_t mode, LIS3MDL_ODR_t odr)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	460b      	mov	r3, r1
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	4613      	mov	r3, r2
 80004dc:	71bb      	strb	r3, [r7, #6]
    uint8_t data;
    hsensor->addr = (uint8_t)(dev << 1);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	765a      	strb	r2, [r3, #25]
    hsensor->scale = (LIS3MDL_Scale_t)scale;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	79ba      	ldrb	r2, [r7, #6]
 80004ec:	761a      	strb	r2, [r3, #24]

    if (HAL_I2C_IsDeviceReady(hi2c, (uint16_t)hsensor->addr, 2, 5) != HAL_OK)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	7e5b      	ldrb	r3, [r3, #25]
 80004f2:	b299      	uxth	r1, r3
 80004f4:	2305      	movs	r3, #5
 80004f6:	2202      	movs	r2, #2
 80004f8:	68b8      	ldr	r0, [r7, #8]
 80004fa:	f001 fca3 	bl	8001e44 <HAL_I2C_IsDeviceReady>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <LIS3MDL_Init+0x40>
        return LIS3MDL_ERROR;
 8000504:	2301      	movs	r3, #1
 8000506:	e0a4      	b.n	8000652 <LIS3MDL_Init+0x18a>

    readByte(hi2c, hsensor->addr, WHO_AM_I, &data);
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	7e59      	ldrb	r1, [r3, #25]
 800050c:	f107 0317 	add.w	r3, r7, #23
 8000510:	220f      	movs	r2, #15
 8000512:	68b8      	ldr	r0, [r7, #8]
 8000514:	f000 f9c1 	bl	800089a <readByte>
    if (data != 0x3D)
 8000518:	7dfb      	ldrb	r3, [r7, #23]
 800051a:	2b3d      	cmp	r3, #61	; 0x3d
 800051c:	d001      	beq.n	8000522 <LIS3MDL_Init+0x5a>
        return LIS3MDL_ERROR;
 800051e:	2301      	movs	r3, #1
 8000520:	e097      	b.n	8000652 <LIS3MDL_Init+0x18a>

    readByte(hi2c, hsensor->addr, CTRL_REG1, &data);
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	7e59      	ldrb	r1, [r3, #25]
 8000526:	f107 0317 	add.w	r3, r7, #23
 800052a:	2220      	movs	r2, #32
 800052c:	68b8      	ldr	r0, [r7, #8]
 800052e:	f000 f9b4 	bl	800089a <readByte>
    data &= ~0xFE;
 8000532:	7dfb      	ldrb	r3, [r7, #23]
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	75fb      	strb	r3, [r7, #23]
    data |= 0x80 | ((uint8_t)mode << 5) | (uint8_t)odr;
 800053c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000540:	015b      	lsls	r3, r3, #5
 8000542:	b2da      	uxtb	r2, r3
 8000544:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000548:	4313      	orrs	r3, r2
 800054a:	b2da      	uxtb	r2, r3
 800054c:	7dfb      	ldrb	r3, [r7, #23]
 800054e:	4313      	orrs	r3, r2
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000556:	b2db      	uxtb	r3, r3
 8000558:	75fb      	strb	r3, [r7, #23]
    writeByte(hi2c, hsensor->addr, CTRL_REG1, data);
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	7e59      	ldrb	r1, [r3, #25]
 800055e:	7dfb      	ldrb	r3, [r7, #23]
 8000560:	2220      	movs	r2, #32
 8000562:	68b8      	ldr	r0, [r7, #8]
 8000564:	f000 f970 	bl	8000848 <writeByte>

    readByte(hi2c, hsensor->addr, CTRL_REG2, &data);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	7e59      	ldrb	r1, [r3, #25]
 800056c:	f107 0317 	add.w	r3, r7, #23
 8000570:	2221      	movs	r2, #33	; 0x21
 8000572:	68b8      	ldr	r0, [r7, #8]
 8000574:	f000 f991 	bl	800089a <readByte>
    data &= ~0x60;
 8000578:	7dfb      	ldrb	r3, [r7, #23]
 800057a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800057e:	b2db      	uxtb	r3, r3
 8000580:	75fb      	strb	r3, [r7, #23]
    data |= (uint8_t)scale;
 8000582:	7dfa      	ldrb	r2, [r7, #23]
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	4313      	orrs	r3, r2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	75fb      	strb	r3, [r7, #23]
    writeByte(hi2c, hsensor->addr, CTRL_REG2, data);
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	7e59      	ldrb	r1, [r3, #25]
 8000590:	7dfb      	ldrb	r3, [r7, #23]
 8000592:	2221      	movs	r2, #33	; 0x21
 8000594:	68b8      	ldr	r0, [r7, #8]
 8000596:	f000 f957 	bl	8000848 <writeByte>

    readByte(hi2c, hsensor->addr, CTRL_REG3, &data);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	7e59      	ldrb	r1, [r3, #25]
 800059e:	f107 0317 	add.w	r3, r7, #23
 80005a2:	2222      	movs	r2, #34	; 0x22
 80005a4:	68b8      	ldr	r0, [r7, #8]
 80005a6:	f000 f978 	bl	800089a <readByte>
    data &= ~0x03;
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	f023 0303 	bic.w	r3, r3, #3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	75fb      	strb	r3, [r7, #23]
    data |= 0x00;
 80005b4:	7dfb      	ldrb	r3, [r7, #23]
 80005b6:	75fb      	strb	r3, [r7, #23]
    writeByte(hi2c, hsensor->addr, CTRL_REG3, data);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	7e59      	ldrb	r1, [r3, #25]
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
 80005be:	2222      	movs	r2, #34	; 0x22
 80005c0:	68b8      	ldr	r0, [r7, #8]
 80005c2:	f000 f941 	bl	8000848 <writeByte>

    readByte(hi2c, hsensor->addr, CTRL_REG4, &data);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	7e59      	ldrb	r1, [r3, #25]
 80005ca:	f107 0317 	add.w	r3, r7, #23
 80005ce:	2223      	movs	r2, #35	; 0x23
 80005d0:	68b8      	ldr	r0, [r7, #8]
 80005d2:	f000 f962 	bl	800089a <readByte>
    data &= ~0x0C;
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	f023 030c 	bic.w	r3, r3, #12
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	75fb      	strb	r3, [r7, #23]
    data |= (uint8_t)(mode << 2);
 80005e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	75fb      	strb	r3, [r7, #23]
    writeByte(hi2c, hsensor->addr, CTRL_REG4, data);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	7e59      	ldrb	r1, [r3, #25]
 80005f4:	7dfb      	ldrb	r3, [r7, #23]
 80005f6:	2223      	movs	r2, #35	; 0x23
 80005f8:	68b8      	ldr	r0, [r7, #8]
 80005fa:	f000 f925 	bl	8000848 <writeByte>

    readByte(hi2c, hsensor->addr, CTRL_REG5, &data);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	7e59      	ldrb	r1, [r3, #25]
 8000602:	f107 0317 	add.w	r3, r7, #23
 8000606:	2224      	movs	r2, #36	; 0x24
 8000608:	68b8      	ldr	r0, [r7, #8]
 800060a:	f000 f946 	bl	800089a <readByte>
    data &= ~0xC0;
 800060e:	7dfb      	ldrb	r3, [r7, #23]
 8000610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000614:	b2db      	uxtb	r3, r3
 8000616:	75fb      	strb	r3, [r7, #23]
    data |= 0x00;
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	75fb      	strb	r3, [r7, #23]
    writeByte(hi2c, hsensor->addr, CTRL_REG5, data);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	7e59      	ldrb	r1, [r3, #25]
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	2224      	movs	r2, #36	; 0x24
 8000624:	68b8      	ldr	r0, [r7, #8]
 8000626:	f000 f90f 	bl	8000848 <writeByte>

    readByte(hi2c, hsensor->addr, INT_CFG, &data);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	7e59      	ldrb	r1, [r3, #25]
 800062e:	f107 0317 	add.w	r3, r7, #23
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f000 f930 	bl	800089a <readByte>
    data &= 0x00;
 800063a:	2300      	movs	r3, #0
 800063c:	75fb      	strb	r3, [r7, #23]
    data |= 0x00;
 800063e:	7dfb      	ldrb	r3, [r7, #23]
 8000640:	75fb      	strb	r3, [r7, #23]
    writeByte(hi2c, hsensor->addr, INT_CFG, data);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	7e59      	ldrb	r1, [r3, #25]
 8000646:	7dfb      	ldrb	r3, [r7, #23]
 8000648:	2230      	movs	r2, #48	; 0x30
 800064a:	68b8      	ldr	r0, [r7, #8]
 800064c:	f000 f8fc 	bl	8000848 <writeByte>

    return LIS3MDL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <LIS3MDL_ReadMag>:

LIS3MDL_Result_t LIS3MDL_ReadMag(LIS3MDL_t *hsensor, I2C_HandleTypeDef *hi2c)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af02      	add	r7, sp, #8
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
    uint8_t data[6];

    readMultiBytes(hi2c, hsensor->addr, OUT_X_L, data, 6);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7e59      	ldrb	r1, [r3, #25]
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2206      	movs	r2, #6
 8000670:	9200      	str	r2, [sp, #0]
 8000672:	2228      	movs	r2, #40	; 0x28
 8000674:	6838      	ldr	r0, [r7, #0]
 8000676:	f000 f943 	bl	8000900 <readMultiBytes>

    hsensor->mag_raw[0] = ((int16_t)data[1] << 8) | data[0];
 800067a:	7a7b      	ldrb	r3, [r7, #9]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	b21a      	sxth	r2, r3
 8000680:	7a3b      	ldrb	r3, [r7, #8]
 8000682:	b21b      	sxth	r3, r3
 8000684:	4313      	orrs	r3, r2
 8000686:	b21a      	sxth	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	821a      	strh	r2, [r3, #16]
    hsensor->mag_raw[1] = ((int16_t)data[3] << 8) | data[2];
 800068c:	7afb      	ldrb	r3, [r7, #11]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	b21a      	sxth	r2, r3
 8000692:	7abb      	ldrb	r3, [r7, #10]
 8000694:	b21b      	sxth	r3, r3
 8000696:	4313      	orrs	r3, r2
 8000698:	b21a      	sxth	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	825a      	strh	r2, [r3, #18]
    hsensor->mag_raw[2] = ((int16_t)data[5] << 8) | data[4];
 800069e:	7b7b      	ldrb	r3, [r7, #13]
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	7b3b      	ldrb	r3, [r7, #12]
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	829a      	strh	r2, [r3, #20]

    switch (hsensor->scale) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7e1b      	ldrb	r3, [r3, #24]
 80006b4:	2b60      	cmp	r3, #96	; 0x60
 80006b6:	f000 808e 	beq.w	80007d6 <LIS3MDL_ReadMag+0x17a>
 80006ba:	2b60      	cmp	r3, #96	; 0x60
 80006bc:	f300 80b6 	bgt.w	800082c <LIS3MDL_ReadMag+0x1d0>
 80006c0:	2b40      	cmp	r3, #64	; 0x40
 80006c2:	d05d      	beq.n	8000780 <LIS3MDL_ReadMag+0x124>
 80006c4:	2b40      	cmp	r3, #64	; 0x40
 80006c6:	f300 80b1 	bgt.w	800082c <LIS3MDL_ReadMag+0x1d0>
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <LIS3MDL_ReadMag+0x78>
 80006ce:	2b20      	cmp	r3, #32
 80006d0:	d02b      	beq.n	800072a <LIS3MDL_ReadMag+0xce>
 80006d2:	e0ab      	b.n	800082c <LIS3MDL_ReadMag+0x1d0>
        case LIS3MDL_Scale_4G:
            hsensor->mag[0] = (float)(hsensor->mag_raw[0] / 6842.0f);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80006da:	ee07 3a90 	vmov	s15, r3
 80006de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006e2:	eddf 6a55 	vldr	s13, [pc, #340]	; 8000838 <LIS3MDL_ReadMag+0x1dc>
 80006e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	edc3 7a00 	vstr	s15, [r3]
            hsensor->mag[1] = (float)(hsensor->mag_raw[1] / 6842.0f);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80006f6:	ee07 3a90 	vmov	s15, r3
 80006fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006fe:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8000838 <LIS3MDL_ReadMag+0x1dc>
 8000702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	edc3 7a01 	vstr	s15, [r3, #4]
            hsensor->mag[2] = (float)(hsensor->mag_raw[2] / 6842.0f);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800071a:	eddf 6a47 	vldr	s13, [pc, #284]	; 8000838 <LIS3MDL_ReadMag+0x1dc>
 800071e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	edc3 7a02 	vstr	s15, [r3, #8]
            break;
 8000728:	e080      	b.n	800082c <LIS3MDL_ReadMag+0x1d0>
        case LIS3MDL_Scale_8G:
            hsensor->mag[0] = (float)(hsensor->mag_raw[0] / 3421.0f);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000730:	ee07 3a90 	vmov	s15, r3
 8000734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000738:	eddf 6a40 	vldr	s13, [pc, #256]	; 800083c <LIS3MDL_ReadMag+0x1e0>
 800073c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	edc3 7a00 	vstr	s15, [r3]
            hsensor->mag[1] = (float)(hsensor->mag_raw[1] / 3421.0f);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800074c:	ee07 3a90 	vmov	s15, r3
 8000750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000754:	eddf 6a39 	vldr	s13, [pc, #228]	; 800083c <LIS3MDL_ReadMag+0x1e0>
 8000758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	edc3 7a01 	vstr	s15, [r3, #4]
            hsensor->mag[2] = (float)(hsensor->mag_raw[2] / 3421.0f);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000770:	eddf 6a32 	vldr	s13, [pc, #200]	; 800083c <LIS3MDL_ReadMag+0x1e0>
 8000774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	edc3 7a02 	vstr	s15, [r3, #8]
            break;
 800077e:	e055      	b.n	800082c <LIS3MDL_ReadMag+0x1d0>
        case LIS3MDL_Scale_12G:
            hsensor->mag[0] = (float)(hsensor->mag_raw[0] / 2281.0f);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000786:	ee07 3a90 	vmov	s15, r3
 800078a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800078e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8000840 <LIS3MDL_ReadMag+0x1e4>
 8000792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	edc3 7a00 	vstr	s15, [r3]
            hsensor->mag[1] = (float)(hsensor->mag_raw[1] / 2281.0f);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80007a2:	ee07 3a90 	vmov	s15, r3
 80007a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007aa:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000840 <LIS3MDL_ReadMag+0x1e4>
 80007ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	edc3 7a01 	vstr	s15, [r3, #4]
            hsensor->mag[2] = (float)(hsensor->mag_raw[2] / 2281.0f);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80007be:	ee07 3a90 	vmov	s15, r3
 80007c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007c6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000840 <LIS3MDL_ReadMag+0x1e4>
 80007ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	edc3 7a02 	vstr	s15, [r3, #8]
            break;
 80007d4:	e02a      	b.n	800082c <LIS3MDL_ReadMag+0x1d0>
        case LIS3MDL_Scale_16G:
            hsensor->mag[0] = (float)(hsensor->mag_raw[0] / 1711.0f);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80007dc:	ee07 3a90 	vmov	s15, r3
 80007e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007e4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000844 <LIS3MDL_ReadMag+0x1e8>
 80007e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	edc3 7a00 	vstr	s15, [r3]
            hsensor->mag[1] = (float)(hsensor->mag_raw[1] / 1711.0f);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80007f8:	ee07 3a90 	vmov	s15, r3
 80007fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000800:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000844 <LIS3MDL_ReadMag+0x1e8>
 8000804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	edc3 7a01 	vstr	s15, [r3, #4]
            hsensor->mag[2] = (float)(hsensor->mag_raw[2] / 1711.0f);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000814:	ee07 3a90 	vmov	s15, r3
 8000818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800081c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000844 <LIS3MDL_ReadMag+0x1e8>
 8000820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	edc3 7a02 	vstr	s15, [r3, #8]
            break;
 800082a:	bf00      	nop
    }
    return LIS3MDL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	45d5d000 	.word	0x45d5d000
 800083c:	4555d000 	.word	0x4555d000
 8000840:	450e9000 	.word	0x450e9000
 8000844:	44d5e000 	.word	0x44d5e000

08000848 <writeByte>:
    return LIS3MDL_OK;
}

/* I2C R/W Functions */
static HAL_StatusTypeDef writeByte(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t register_addr, uint8_t data)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af02      	add	r7, sp, #8
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	4608      	mov	r0, r1
 8000852:	4611      	mov	r1, r2
 8000854:	461a      	mov	r2, r3
 8000856:	4603      	mov	r3, r0
 8000858:	70fb      	strb	r3, [r7, #3]
 800085a:	460b      	mov	r3, r1
 800085c:	70bb      	strb	r3, [r7, #2]
 800085e:	4613      	mov	r3, r2
 8000860:	707b      	strb	r3, [r7, #1]
    uint8_t buffer[2];
    buffer[0] = register_addr;
 8000862:	78bb      	ldrb	r3, [r7, #2]
 8000864:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;
 8000866:	787b      	ldrb	r3, [r7, #1]
 8000868:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_addr, (uint8_t *)buffer, 2, 1000) != HAL_OK) {
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	b299      	uxth	r1, r3
 800086e:	f107 020c 	add.w	r2, r7, #12
 8000872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2302      	movs	r3, #2
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 ffbe 	bl	80017fc <HAL_I2C_Master_Transmit>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d004      	beq.n	8000890 <writeByte+0x48>
        if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {}
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f001 fe86 	bl	8002598 <HAL_I2C_GetError>
        return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <writeByte+0x4a>
    }
    return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <readByte>:

static HAL_StatusTypeDef readByte(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t register_addr, uint8_t *data)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af02      	add	r7, sp, #8
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	72fb      	strb	r3, [r7, #11]
 80008a8:	4613      	mov	r3, r2
 80008aa:	72bb      	strb	r3, [r7, #10]
    if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_addr, &register_addr, 1, 1000) != HAL_OK) {
 80008ac:	7afb      	ldrb	r3, [r7, #11]
 80008ae:	b299      	uxth	r1, r3
 80008b0:	f107 020a 	add.w	r2, r7, #10
 80008b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f000 ff9d 	bl	80017fc <HAL_I2C_Master_Transmit>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d004      	beq.n	80008d2 <readByte+0x38>
        if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {}
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f001 fe65 	bl	8002598 <HAL_I2C_GetError>
        return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e012      	b.n	80008f8 <readByte+0x5e>
    }
    if (HAL_I2C_Master_Receive(hi2c, (uint16_t)device_addr, data, 1, 1000) != HAL_OK) {
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	b299      	uxth	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2301      	movs	r3, #1
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f001 f889 	bl	80019f8 <HAL_I2C_Master_Receive>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d004      	beq.n	80008f6 <readByte+0x5c>
        if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {}
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f001 fe53 	bl	8002598 <HAL_I2C_GetError>
        return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <readByte+0x5e>
    }
    return HAL_OK;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <readMultiBytes>:

static HAL_StatusTypeDef readMultiBytes(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t register_addr, uint8_t *data, uint16_t count)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	460b      	mov	r3, r1
 800090c:	72fb      	strb	r3, [r7, #11]
 800090e:	4613      	mov	r3, r2
 8000910:	72bb      	strb	r3, [r7, #10]
    if (HAL_I2C_Master_Transmit(hi2c, (uint16_t)device_addr, &register_addr, 1, 1000) != HAL_OK) {
 8000912:	7afb      	ldrb	r3, [r7, #11]
 8000914:	b299      	uxth	r1, r3
 8000916:	f107 020a 	add.w	r2, r7, #10
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2301      	movs	r3, #1
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f000 ff6a 	bl	80017fc <HAL_I2C_Master_Transmit>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d004      	beq.n	8000938 <readMultiBytes+0x38>
        if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {}
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f001 fe32 	bl	8002598 <HAL_I2C_GetError>
        return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	e012      	b.n	800095e <readMultiBytes+0x5e>
    }
    if (HAL_I2C_Master_Receive(hi2c, (uint16_t)device_addr, data, count, 1000) != HAL_OK) {
 8000938:	7afb      	ldrb	r3, [r7, #11]
 800093a:	b299      	uxth	r1, r3
 800093c:	8b3b      	ldrh	r3, [r7, #24]
 800093e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f001 f856 	bl	80019f8 <HAL_I2C_Master_Receive>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d004      	beq.n	800095c <readMultiBytes+0x5c>
        if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {}
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f001 fe20 	bl	8002598 <HAL_I2C_GetError>
        return HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	e000      	b.n	800095e <readMultiBytes+0x5e>
    }
    return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 faf8 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f826 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f000 f8bc 	bl	8000af0 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000978:	f000 f88c 	bl	8000a94 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800097c:	f004 fb16 	bl	8004fac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Util */
  UtilHandle = osThreadNew(StartUtil, NULL, &Util_attributes);
 8000980:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <main+0x40>)
 8000982:	2100      	movs	r1, #0
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <main+0x44>)
 8000986:	f004 fb5b 	bl	8005040 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <main+0x48>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of Sensor */
  SensorHandle = osThreadNew(StartSensor, NULL, &Sensor_attributes);
 8000990:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <main+0x4c>)
 8000992:	2100      	movs	r1, #0
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <main+0x50>)
 8000996:	f004 fb53 	bl	8005040 <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <main+0x54>)
 800099e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009a0:	f004 fb28 	bl	8004ff4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0x3c>
 80009a6:	bf00      	nop
 80009a8:	08007b00 	.word	0x08007b00
 80009ac:	08000bb1 	.word	0x08000bb1
 80009b0:	2000493c 	.word	0x2000493c
 80009b4:	08007b24 	.word	0x08007b24
 80009b8:	08000c1d 	.word	0x08000c1d
 80009bc:	200049a4 	.word	0x200049a4

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f007 f86e 	bl	8007ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <SystemClock_Config+0xcc>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a34:	23a8      	movs	r3, #168	; 0xa8
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 fb19 	bl	800407c <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a50:	f000 f910 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2105      	movs	r1, #5
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 fd7a 	bl	800456c <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a7e:	f000 f8f9 	bl	8000c74 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3750      	adds	r7, #80	; 0x50
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40007000 	.word	0x40007000

08000a94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <MX_I2C3_Init+0x54>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_I2C3_Init+0x58>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_I2C3_Init+0x50>)
 8000ad2:	f000 fd4f 	bl	8001574 <HAL_I2C_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 f8ca 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20004940 	.word	0x20004940
 8000ae8:	40005c00 	.word	0x40005c00
 8000aec:	000186a0 	.word	0x000186a0

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a26      	ldr	r2, [pc, #152]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_GPIO_Init+0xb8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7c:	480b      	ldr	r0, [pc, #44]	; (8000bac <MX_GPIO_Init+0xbc>)
 8000b7e:	f000 fcdf 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_GPIO_Init+0xbc>)
 8000b9c:	f000 fb34 	bl	8001208 <HAL_GPIO_Init>

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <StartUtil>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUtil */
void StartUtil(void *argument)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  magValue[0] = sensor.mag_raw[0];
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <StartUtil+0x60>)
 8000bba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <StartUtil+0x64>)
 8000bc8:	edc3 7a00 	vstr	s15, [r3]
	  magValue[1] = sensor.mag_raw[1];
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <StartUtil+0x60>)
 8000bce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bd2:	ee07 3a90 	vmov	s15, r3
 8000bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <StartUtil+0x64>)
 8000bdc:	edc3 7a01 	vstr	s15, [r3, #4]
	  magValue[2] = sensor.mag_raw[2];
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <StartUtil+0x60>)
 8000be2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <StartUtil+0x64>)
 8000bf0:	edc3 7a02 	vstr	s15, [r3, #8]
	  temp = sensor.temp_raw;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <StartUtil+0x60>)
 8000bf6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000bfa:	ee07 3a90 	vmov	s15, r3
 8000bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <StartUtil+0x68>)
 8000c04:	edc3 7a00 	vstr	s15, [r3]
	  osDelay(UTIL_REFRESH_RATE);
 8000c08:	2064      	movs	r0, #100	; 0x64
 8000c0a:	f004 faab 	bl	8005164 <osDelay>
	  magValue[0] = sensor.mag_raw[0];
 8000c0e:	e7d3      	b.n	8000bb8 <StartUtil+0x8>
 8000c10:	200049a8 	.word	0x200049a8
 8000c14:	20004998 	.word	0x20004998
 8000c18:	20004994 	.word	0x20004994

08000c1c <StartSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensor */
void StartSensor(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensor */
	LIS3MDL_Init(&sensor, &hi2c3, LIS3MDL_Device_0, LIS3MDL_Scale_4G, LIS3MDL_MODE_ULTRAHIGH, LIS3MDL_ODR_7);
 8000c24:	231c      	movs	r3, #28
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	2303      	movs	r3, #3
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	221c      	movs	r2, #28
 8000c30:	4905      	ldr	r1, [pc, #20]	; (8000c48 <StartSensor+0x2c>)
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <StartSensor+0x30>)
 8000c34:	f7ff fc48 	bl	80004c8 <LIS3MDL_Init>
  /* Infinite loop */
  for(;;)
  {
	  LIS3MDL_ReadMag(&sensor, &hi2c3);
 8000c38:	4903      	ldr	r1, [pc, #12]	; (8000c48 <StartSensor+0x2c>)
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <StartSensor+0x30>)
 8000c3c:	f7ff fd0e 	bl	800065c <LIS3MDL_ReadMag>
	  osDelay(SENSOR_REFRESH_RATE);
 8000c40:	2064      	movs	r0, #100	; 0x64
 8000c42:	f004 fa8f 	bl	8005164 <osDelay>
	  LIS3MDL_ReadMag(&sensor, &hi2c3);
 8000c46:	e7f7      	b.n	8000c38 <StartSensor+0x1c>
 8000c48:	20004940 	.word	0x20004940
 8000c4c:	200049a8 	.word	0x200049a8

08000c50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d101      	bne.n	8000c66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c62:	f000 f99f 	bl	8000fa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010000 	.word	0x40010000

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_MspInit+0x54>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <HAL_MspInit+0x54>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_MspInit+0x54>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_MspInit+0x54>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_MspInit+0x54>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_MspInit+0x54>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	210f      	movs	r1, #15
 8000cc2:	f06f 0001 	mvn.w	r0, #1
 8000cc6:	f000 fa45 	bl	8001154 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a31      	ldr	r2, [pc, #196]	; (8000dbc <HAL_I2C_MspInit+0xe4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d15b      	bne.n	8000db2 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_I2C_MspInit+0xe8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <HAL_I2C_MspInit+0xe8>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_I2C_MspInit+0xe8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_I2C_MspInit+0xe8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <HAL_I2C_MspInit+0xe8>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_I2C_MspInit+0xe8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d44:	2304      	movs	r3, #4
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <HAL_I2C_MspInit+0xec>)
 8000d50:	f000 fa5a 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d66:	2304      	movs	r3, #4
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <HAL_I2C_MspInit+0xf0>)
 8000d72:	f000 fa49 	bl	8001208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_I2C_MspInit+0xe8>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_I2C_MspInit+0xe8>)
 8000d80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_I2C_MspInit+0xe8>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2105      	movs	r1, #5
 8000d96:	2048      	movs	r0, #72	; 0x48
 8000d98:	f000 f9dc 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000d9c:	2048      	movs	r0, #72	; 0x48
 8000d9e:	f000 f9f5 	bl	800118c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2105      	movs	r1, #5
 8000da6:	2049      	movs	r0, #73	; 0x49
 8000da8:	f000 f9d4 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000dac:	2049      	movs	r0, #73	; 0x49
 8000dae:	f000 f9ed 	bl	800118c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40005c00 	.word	0x40005c00
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	2019      	movs	r0, #25
 8000de2:	f000 f9b7 	bl	8001154 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000de6:	2019      	movs	r0, #25
 8000de8:	f000 f9d0 	bl	800118c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <HAL_InitTick+0xa4>)
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HAL_InitTick+0xa4>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <HAL_InitTick+0xa4>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e08:	f107 0210 	add.w	r2, r7, #16
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 fda6 	bl	8004964 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e18:	f003 fd90 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e24:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <HAL_InitTick+0xa8>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0c9b      	lsrs	r3, r3, #18
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_InitTick+0xac>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <HAL_InitTick+0xb0>)
 8000e34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_InitTick+0xac>)
 8000e38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_InitTick+0xac>)
 8000e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_InitTick+0xac>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_InitTick+0xac>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_InitTick+0xac>)
 8000e52:	f003 fdb9 	bl	80049c8 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <HAL_InitTick+0xac>)
 8000e5e:	f003 fe0d 	bl	8004a7c <HAL_TIM_Base_Start_IT>
 8000e62:	4603      	mov	r3, r0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3730      	adds	r7, #48	; 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	200049c4 	.word	0x200049c4
 8000e7c:	40010000 	.word	0x40010000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000eb2:	f003 fe53 	bl	8004b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200049c4 	.word	0x200049c4

08000ec0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <I2C3_EV_IRQHandler+0x10>)
 8000ec6:	f001 f8eb 	bl	80020a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20004940 	.word	0x20004940

08000ed4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <I2C3_ER_IRQHandler+0x10>)
 8000eda:	f001 fa4e 	bl	800237a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20004940 	.word	0x20004940

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f36:	f7ff ffd7 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f006 fd87 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fd13 	bl	8000968 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f50:	08007b70 	.word	0x08007b70
  ldr r2, =_sbss
 8000f54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f58:	20004a50 	.word	0x20004a50

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f8d8 	bl	800113e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff ff1c 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fe74 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20004a0c 	.word	0x20004a0c

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20004a0c 	.word	0x20004a0c

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff4c 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001166:	f7ff ff61 	bl	800102c <__NVIC_GetPriorityGrouping>
 800116a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	6978      	ldr	r0, [r7, #20]
 8001172:	f7ff ffb1 	bl	80010d8 <NVIC_EncodePriority>
 8001176:	4602      	mov	r2, r0
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff80 	bl	8001084 <__NVIC_SetPriority>
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff54 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d004      	beq.n	80011c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00c      	b.n	80011e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2205      	movs	r2, #5
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011fa:	b2db      	uxtb	r3, r3
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e16b      	b.n	80014fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 815a 	bne.w	80014f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001256:	2b02      	cmp	r3, #2
 8001258:	d130      	bne.n	80012bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d017      	beq.n	80012f8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d123      	bne.n	800134c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0203 	and.w	r2, r3, #3
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80b4 	beq.w	80014f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b60      	ldr	r3, [pc, #384]	; (8001514 <HAL_GPIO_Init+0x30c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a5f      	ldr	r2, [pc, #380]	; (8001514 <HAL_GPIO_Init+0x30c>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b5d      	ldr	r3, [pc, #372]	; (8001514 <HAL_GPIO_Init+0x30c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013aa:	4a5b      	ldr	r2, [pc, #364]	; (8001518 <HAL_GPIO_Init+0x310>)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a52      	ldr	r2, [pc, #328]	; (800151c <HAL_GPIO_Init+0x314>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d02b      	beq.n	800142e <HAL_GPIO_Init+0x226>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a51      	ldr	r2, [pc, #324]	; (8001520 <HAL_GPIO_Init+0x318>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d025      	beq.n	800142a <HAL_GPIO_Init+0x222>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a50      	ldr	r2, [pc, #320]	; (8001524 <HAL_GPIO_Init+0x31c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01f      	beq.n	8001426 <HAL_GPIO_Init+0x21e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4f      	ldr	r2, [pc, #316]	; (8001528 <HAL_GPIO_Init+0x320>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d019      	beq.n	8001422 <HAL_GPIO_Init+0x21a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4e      	ldr	r2, [pc, #312]	; (800152c <HAL_GPIO_Init+0x324>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x216>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4d      	ldr	r2, [pc, #308]	; (8001530 <HAL_GPIO_Init+0x328>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x212>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4c      	ldr	r2, [pc, #304]	; (8001534 <HAL_GPIO_Init+0x32c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x20e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4b      	ldr	r2, [pc, #300]	; (8001538 <HAL_GPIO_Init+0x330>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x20a>
 800140e:	2307      	movs	r3, #7
 8001410:	e00e      	b.n	8001430 <HAL_GPIO_Init+0x228>
 8001412:	2308      	movs	r3, #8
 8001414:	e00c      	b.n	8001430 <HAL_GPIO_Init+0x228>
 8001416:	2306      	movs	r3, #6
 8001418:	e00a      	b.n	8001430 <HAL_GPIO_Init+0x228>
 800141a:	2305      	movs	r3, #5
 800141c:	e008      	b.n	8001430 <HAL_GPIO_Init+0x228>
 800141e:	2304      	movs	r3, #4
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x228>
 8001422:	2303      	movs	r3, #3
 8001424:	e004      	b.n	8001430 <HAL_GPIO_Init+0x228>
 8001426:	2302      	movs	r3, #2
 8001428:	e002      	b.n	8001430 <HAL_GPIO_Init+0x228>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <HAL_GPIO_Init+0x228>
 800142e:	2300      	movs	r3, #0
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	f002 0203 	and.w	r2, r2, #3
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4093      	lsls	r3, r2
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001440:	4935      	ldr	r1, [pc, #212]	; (8001518 <HAL_GPIO_Init+0x310>)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_GPIO_Init+0x334>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001472:	4a32      	ldr	r2, [pc, #200]	; (800153c <HAL_GPIO_Init+0x334>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_GPIO_Init+0x334>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149c:	4a27      	ldr	r2, [pc, #156]	; (800153c <HAL_GPIO_Init+0x334>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_GPIO_Init+0x334>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_GPIO_Init+0x334>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_GPIO_Init+0x334>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <HAL_GPIO_Init+0x334>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	2b0f      	cmp	r3, #15
 8001500:	f67f ae90 	bls.w	8001224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40013800 	.word	0x40013800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021000 	.word	0x40021000
 8001530:	40021400 	.word	0x40021400
 8001534:	40021800 	.word	0x40021800
 8001538:	40021c00 	.word	0x40021c00
 800153c:	40013c00 	.word	0x40013c00

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e12b      	b.n	80017de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fb9c 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2224      	movs	r2, #36	; 0x24
 80015a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015d8:	f003 f99c 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 80015dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a81      	ldr	r2, [pc, #516]	; (80017e8 <HAL_I2C_Init+0x274>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d807      	bhi.n	80015f8 <HAL_I2C_Init+0x84>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4a80      	ldr	r2, [pc, #512]	; (80017ec <HAL_I2C_Init+0x278>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	bf94      	ite	ls
 80015f0:	2301      	movls	r3, #1
 80015f2:	2300      	movhi	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	e006      	b.n	8001606 <HAL_I2C_Init+0x92>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4a7d      	ldr	r2, [pc, #500]	; (80017f0 <HAL_I2C_Init+0x27c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	bf94      	ite	ls
 8001600:	2301      	movls	r3, #1
 8001602:	2300      	movhi	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0e7      	b.n	80017de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4a78      	ldr	r2, [pc, #480]	; (80017f4 <HAL_I2C_Init+0x280>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0c9b      	lsrs	r3, r3, #18
 8001618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a6a      	ldr	r2, [pc, #424]	; (80017e8 <HAL_I2C_Init+0x274>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d802      	bhi.n	8001648 <HAL_I2C_Init+0xd4>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3301      	adds	r3, #1
 8001646:	e009      	b.n	800165c <HAL_I2C_Init+0xe8>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	4a69      	ldr	r2, [pc, #420]	; (80017f8 <HAL_I2C_Init+0x284>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	3301      	adds	r3, #1
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	430b      	orrs	r3, r1
 8001662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800166e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	495c      	ldr	r1, [pc, #368]	; (80017e8 <HAL_I2C_Init+0x274>)
 8001678:	428b      	cmp	r3, r1
 800167a:	d819      	bhi.n	80016b0 <HAL_I2C_Init+0x13c>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e59      	subs	r1, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fbb1 f3f3 	udiv	r3, r1, r3
 800168a:	1c59      	adds	r1, r3, #1
 800168c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001690:	400b      	ands	r3, r1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00a      	beq.n	80016ac <HAL_I2C_Init+0x138>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1e59      	subs	r1, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016aa:	e051      	b.n	8001750 <HAL_I2C_Init+0x1dc>
 80016ac:	2304      	movs	r3, #4
 80016ae:	e04f      	b.n	8001750 <HAL_I2C_Init+0x1dc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d111      	bne.n	80016dc <HAL_I2C_Init+0x168>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1e58      	subs	r0, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	440b      	add	r3, r1
 80016c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf0c      	ite	eq
 80016d4:	2301      	moveq	r3, #1
 80016d6:	2300      	movne	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	e012      	b.n	8001702 <HAL_I2C_Init+0x18e>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1e58      	subs	r0, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	0099      	lsls	r1, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_I2C_Init+0x196>
 8001706:	2301      	movs	r3, #1
 8001708:	e022      	b.n	8001750 <HAL_I2C_Init+0x1dc>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10e      	bne.n	8001730 <HAL_I2C_Init+0x1bc>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1e58      	subs	r0, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6859      	ldr	r1, [r3, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	440b      	add	r3, r1
 8001720:	fbb0 f3f3 	udiv	r3, r0, r3
 8001724:	3301      	adds	r3, #1
 8001726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172e:	e00f      	b.n	8001750 <HAL_I2C_Init+0x1dc>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1e58      	subs	r0, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	0099      	lsls	r1, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	fbb0 f3f3 	udiv	r3, r0, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	6809      	ldr	r1, [r1, #0]
 8001754:	4313      	orrs	r3, r2
 8001756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69da      	ldr	r2, [r3, #28]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800177e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6911      	ldr	r1, [r2, #16]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68d2      	ldr	r2, [r2, #12]
 800178a:	4311      	orrs	r1, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	430b      	orrs	r3, r1
 8001792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2220      	movs	r2, #32
 80017ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	000186a0 	.word	0x000186a0
 80017ec:	001e847f 	.word	0x001e847f
 80017f0:	003d08ff 	.word	0x003d08ff
 80017f4:	431bde83 	.word	0x431bde83
 80017f8:	10624dd3 	.word	0x10624dd3

080017fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	461a      	mov	r2, r3
 8001808:	460b      	mov	r3, r1
 800180a:	817b      	strh	r3, [r7, #10]
 800180c:	4613      	mov	r3, r2
 800180e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff fbdc 	bl	8000fcc <HAL_GetTick>
 8001814:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b20      	cmp	r3, #32
 8001820:	f040 80e0 	bne.w	80019e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2319      	movs	r3, #25
 800182a:	2201      	movs	r2, #1
 800182c:	4970      	ldr	r1, [pc, #448]	; (80019f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f002 f9fa 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800183a:	2302      	movs	r3, #2
 800183c:	e0d3      	b.n	80019e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_I2C_Master_Transmit+0x50>
 8001848:	2302      	movs	r3, #2
 800184a:	e0cc      	b.n	80019e6 <HAL_I2C_Master_Transmit+0x1ea>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d007      	beq.n	8001872 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2221      	movs	r2, #33	; 0x21
 8001886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2210      	movs	r2, #16
 800188e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	893a      	ldrh	r2, [r7, #8]
 80018a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018b4:	8979      	ldrh	r1, [r7, #10]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f001 ffbc 	bl	8003838 <I2C_MasterRequestWrite>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e08d      	b.n	80019e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018e0:	e066      	b.n	80019b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	6a39      	ldr	r1, [r7, #32]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f002 fa74 	bl	8003dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00d      	beq.n	800190e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d107      	bne.n	800190a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e06b      	b.n	80019e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	3b01      	subs	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b04      	cmp	r3, #4
 800194a:	d11b      	bne.n	8001984 <HAL_I2C_Master_Transmit+0x188>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001950:	2b00      	cmp	r3, #0
 8001952:	d017      	beq.n	8001984 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	781a      	ldrb	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196e:	b29b      	uxth	r3, r3
 8001970:	3b01      	subs	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	6a39      	ldr	r1, [r7, #32]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f002 fa64 	bl	8003e56 <I2C_WaitOnBTFFlagUntilTimeout>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00d      	beq.n	80019b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	2b04      	cmp	r3, #4
 800199a:	d107      	bne.n	80019ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e01a      	b.n	80019e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d194      	bne.n	80018e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2220      	movs	r2, #32
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e000      	b.n	80019e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019e4:	2302      	movs	r3, #2
  }
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	00100002 	.word	0x00100002
 80019f4:	ffff0000 	.word	0xffff0000

080019f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	; 0x30
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	461a      	mov	r2, r3
 8001a04:	460b      	mov	r3, r1
 8001a06:	817b      	strh	r3, [r7, #10]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff fade 	bl	8000fcc <HAL_GetTick>
 8001a10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	f040 820b 	bne.w	8001e36 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2319      	movs	r3, #25
 8001a26:	2201      	movs	r2, #1
 8001a28:	497c      	ldr	r1, [pc, #496]	; (8001c1c <HAL_I2C_Master_Receive+0x224>)
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f002 f8fc 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
 8001a38:	e1fe      	b.n	8001e38 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_I2C_Master_Receive+0x50>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e1f7      	b.n	8001e38 <HAL_I2C_Master_Receive+0x440>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d007      	beq.n	8001a6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2222      	movs	r2, #34	; 0x22
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2210      	movs	r2, #16
 8001a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	893a      	ldrh	r2, [r7, #8]
 8001a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <HAL_I2C_Master_Receive+0x228>)
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ab0:	8979      	ldrh	r1, [r7, #10]
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f001 ff40 	bl	800393c <I2C_MasterRequestRead>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1b8      	b.n	8001e38 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d113      	bne.n	8001af6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	623b      	str	r3, [r7, #32]
 8001ae2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e18c      	b.n	8001e10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d11b      	bne.n	8001b36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e16c      	b.n	8001e10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d11b      	bne.n	8001b76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	e14c      	b.n	8001e10 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b9c:	e138      	b.n	8001e10 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	f200 80f1 	bhi.w	8001d8a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d123      	bne.n	8001bf8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f002 f9c1 	bl	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e139      	b.n	8001e38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bf6:	e10b      	b.n	8001e10 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d14e      	bne.n	8001c9e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c06:	2200      	movs	r2, #0
 8001c08:	4906      	ldr	r1, [pc, #24]	; (8001c24 <HAL_I2C_Master_Receive+0x22c>)
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f002 f80c 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e10e      	b.n	8001e38 <HAL_I2C_Master_Receive+0x440>
 8001c1a:	bf00      	nop
 8001c1c:	00100002 	.word	0x00100002
 8001c20:	ffff0000 	.word	0xffff0000
 8001c24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c9c:	e0b8      	b.n	8001e10 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4966      	ldr	r1, [pc, #408]	; (8001e40 <HAL_I2C_Master_Receive+0x448>)
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f001 ffbd 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0bf      	b.n	8001e38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d00:	2200      	movs	r2, #0
 8001d02:	494f      	ldr	r1, [pc, #316]	; (8001e40 <HAL_I2C_Master_Receive+0x448>)
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f001 ff8f 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e091      	b.n	8001e38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d88:	e042      	b.n	8001e10 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f002 f8d4 	bl	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e04c      	b.n	8001e38 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d118      	bne.n	8001e10 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f47f aec2 	bne.w	8001b9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
  }
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	00010004 	.word	0x00010004

08001e44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	460b      	mov	r3, r1
 8001e52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff f8ba 	bl	8000fcc <HAL_GetTick>
 8001e58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	f040 8111 	bne.w	800208e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2319      	movs	r3, #25
 8001e72:	2201      	movs	r2, #1
 8001e74:	4988      	ldr	r1, [pc, #544]	; (8002098 <HAL_I2C_IsDeviceReady+0x254>)
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f001 fed6 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
 8001e84:	e104      	b.n	8002090 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2C_IsDeviceReady+0x50>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e0fd      	b.n	8002090 <HAL_I2C_IsDeviceReady+0x24c>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d007      	beq.n	8001eba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2224      	movs	r2, #36	; 0x24
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a70      	ldr	r2, [pc, #448]	; (800209c <HAL_I2C_IsDeviceReady+0x258>)
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f001 fe94 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f14:	d103      	bne.n	8001f1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0b6      	b.n	8002090 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f22:	897b      	ldrh	r3, [r7, #10]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff f84b 	bl	8000fcc <HAL_GetTick>
 8001f36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f66:	e025      	b.n	8001fb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f68:	f7ff f830 	bl	8000fcc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d302      	bcc.n	8001f7e <HAL_I2C_IsDeviceReady+0x13a>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	22a0      	movs	r2, #160	; 0xa0
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2ba0      	cmp	r3, #160	; 0xa0
 8001fbe:	d005      	beq.n	8001fcc <HAL_I2C_IsDeviceReady+0x188>
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_I2C_IsDeviceReady+0x188>
 8001fc6:	7dbb      	ldrb	r3, [r7, #22]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0cd      	beq.n	8001f68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d129      	bne.n	8002036 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2319      	movs	r3, #25
 800200e:	2201      	movs	r2, #1
 8002010:	4921      	ldr	r1, [pc, #132]	; (8002098 <HAL_I2C_IsDeviceReady+0x254>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f001 fe08 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e036      	b.n	8002090 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e02c      	b.n	8002090 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002044:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800204e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2319      	movs	r3, #25
 8002056:	2201      	movs	r2, #1
 8002058:	490f      	ldr	r1, [pc, #60]	; (8002098 <HAL_I2C_IsDeviceReady+0x254>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f001 fde4 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e012      	b.n	8002090 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	3301      	adds	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	f4ff af32 	bcc.w	8001ede <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800208e:	2302      	movs	r3, #2
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	00100002 	.word	0x00100002
 800209c:	ffff0000 	.word	0xffff0000

080020a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d003      	beq.n	80020d8 <HAL_I2C_EV_IRQHandler+0x38>
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	f040 80bd 	bne.w	8002252 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_I2C_EV_IRQHandler+0x6e>
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80020f8:	d003      	beq.n	8002102 <HAL_I2C_EV_IRQHandler+0x62>
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002100:	d101      	bne.n	8002106 <HAL_I2C_EV_IRQHandler+0x66>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_I2C_EV_IRQHandler+0x68>
 8002106:	2300      	movs	r3, #0
 8002108:	2b01      	cmp	r3, #1
 800210a:	f000 812e 	beq.w	800236a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <HAL_I2C_EV_IRQHandler+0x92>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f001 ff8e 	bl	8004046 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fd6e 	bl	8002c0c <I2C_Master_SB>
 8002130:	e08e      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0xb2>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	0a5b      	lsrs	r3, r3, #9
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fde4 	bl	8002d18 <I2C_Master_ADD10>
 8002150:	e07e      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_I2C_EV_IRQHandler+0xd2>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	0a5b      	lsrs	r3, r3, #9
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fdfe 	bl	8002d6c <I2C_Master_ADDR>
 8002170:	e06e      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d037      	beq.n	80021ee <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800218c:	f000 80ef 	beq.w	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	09db      	lsrs	r3, r3, #7
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00f      	beq.n	80021bc <HAL_I2C_EV_IRQHandler+0x11c>
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	0a9b      	lsrs	r3, r3, #10
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_I2C_EV_IRQHandler+0x11c>
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f9fb 	bl	80025b0 <I2C_MasterTransmit_TXE>
 80021ba:	e049      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80d2 	beq.w	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	0a5b      	lsrs	r3, r3, #9
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80cb 	beq.w	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d103      	bne.n	80021e6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fa82 	bl	80026e8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021e4:	e0c3      	b.n	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fae6 	bl	80027b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ec:	e0bf      	b.n	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021fc:	f000 80b7 	beq.w	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00f      	beq.n	800222c <HAL_I2C_EV_IRQHandler+0x18c>
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	0a9b      	lsrs	r3, r3, #10
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HAL_I2C_EV_IRQHandler+0x18c>
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d103      	bne.n	800222c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fb56 	bl	80028d6 <I2C_MasterReceive_RXNE>
 800222a:	e011      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 809a 	beq.w	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	0a5b      	lsrs	r3, r3, #9
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8093 	beq.w	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fbf5 	bl	8002a38 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800224e:	e08e      	b.n	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
 8002250:	e08d      	b.n	800236e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e007      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d012      	beq.n	80022a6 <HAL_I2C_EV_IRQHandler+0x206>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	0a5b      	lsrs	r3, r3, #9
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800229c:	69b9      	ldr	r1, [r7, #24]
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 ffb3 	bl	800320a <I2C_Slave_ADDR>
 80022a4:	e066      	b.n	8002374 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_I2C_EV_IRQHandler+0x226>
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	0a5b      	lsrs	r3, r3, #9
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 ffe8 	bl	8003294 <I2C_Slave_STOPF>
 80022c4:	e056      	b.n	8002374 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	2b21      	cmp	r3, #33	; 0x21
 80022ca:	d002      	beq.n	80022d2 <HAL_I2C_EV_IRQHandler+0x232>
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	2b29      	cmp	r3, #41	; 0x29
 80022d0:	d125      	bne.n	800231e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	09db      	lsrs	r3, r3, #7
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00f      	beq.n	80022fe <HAL_I2C_EV_IRQHandler+0x25e>
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	0a9b      	lsrs	r3, r3, #10
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_I2C_EV_IRQHandler+0x25e>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d103      	bne.n	80022fe <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fec9 	bl	800308e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022fc:	e039      	b.n	8002372 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d033      	beq.n	8002372 <HAL_I2C_EV_IRQHandler+0x2d2>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	0a5b      	lsrs	r3, r3, #9
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d02d      	beq.n	8002372 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fef6 	bl	8003108 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800231c:	e029      	b.n	8002372 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00f      	beq.n	800234a <HAL_I2C_EV_IRQHandler+0x2aa>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	0a9b      	lsrs	r3, r3, #10
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_I2C_EV_IRQHandler+0x2aa>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 ff01 	bl	800314a <I2C_SlaveReceive_RXNE>
 8002348:	e014      	b.n	8002374 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00e      	beq.n	8002374 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	0a5b      	lsrs	r3, r3, #9
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 ff2f 	bl	80031c6 <I2C_SlaveReceive_BTF>
 8002368:	e004      	b.n	8002374 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800236a:	bf00      	nop
 800236c:	e002      	b.n	8002374 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800236e:	bf00      	nop
 8002370:	e000      	b.n	8002374 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002372:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b08a      	sub	sp, #40	; 0x28
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800239c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00e      	beq.n	80023c8 <HAL_I2C_ER_IRQHandler+0x4e>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023c6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00e      	beq.n	80023f2 <HAL_I2C_ER_IRQHandler+0x78>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80023f0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	0a9b      	lsrs	r3, r3, #10
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d03f      	beq.n	800247e <HAL_I2C_ER_IRQHandler+0x104>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d039      	beq.n	800247e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800240a:	7efb      	ldrb	r3, [r7, #27]
 800240c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002424:	7ebb      	ldrb	r3, [r7, #26]
 8002426:	2b20      	cmp	r3, #32
 8002428:	d112      	bne.n	8002450 <HAL_I2C_ER_IRQHandler+0xd6>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10f      	bne.n	8002450 <HAL_I2C_ER_IRQHandler+0xd6>
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	2b21      	cmp	r3, #33	; 0x21
 8002434:	d008      	beq.n	8002448 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b29      	cmp	r3, #41	; 0x29
 800243a:	d005      	beq.n	8002448 <HAL_I2C_ER_IRQHandler+0xce>
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b28      	cmp	r3, #40	; 0x28
 8002440:	d106      	bne.n	8002450 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b21      	cmp	r3, #33	; 0x21
 8002446:	d103      	bne.n	8002450 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f001 f853 	bl	80034f4 <I2C_Slave_AF>
 800244e:	e016      	b.n	800247e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002458:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002462:	7efb      	ldrb	r3, [r7, #27]
 8002464:	2b10      	cmp	r3, #16
 8002466:	d002      	beq.n	800246e <HAL_I2C_ER_IRQHandler+0xf4>
 8002468:	7efb      	ldrb	r3, [r7, #27]
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d107      	bne.n	800247e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	0adb      	lsrs	r3, r3, #11
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00e      	beq.n	80024a8 <HAL_I2C_ER_IRQHandler+0x12e>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80024a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f001 f88a 	bl	80035d4 <I2C_ITError>
  }
}
 80024c0:	bf00      	nop
 80024c2:	3728      	adds	r7, #40	; 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	70fb      	strb	r3, [r7, #3]
 8002524:	4613      	mov	r3, r2
 8002526:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d150      	bne.n	8002678 <I2C_MasterTransmit_TXE+0xc8>
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	2b21      	cmp	r3, #33	; 0x21
 80025da:	d14d      	bne.n	8002678 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d01d      	beq.n	800261e <I2C_MasterTransmit_TXE+0x6e>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d01a      	beq.n	800261e <I2C_MasterTransmit_TXE+0x6e>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025ee:	d016      	beq.n	800261e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025fe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2211      	movs	r2, #17
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ff56 	bl	80024c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800261c:	e060      	b.n	80026e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800262c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d107      	bne.n	8002668 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff71 	bl	8002548 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002666:	e03b      	b.n	80026e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002676:	e033      	b.n	80026e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b21      	cmp	r3, #33	; 0x21
 800267c:	d005      	beq.n	800268a <I2C_MasterTransmit_TXE+0xda>
 800267e:	7bbb      	ldrb	r3, [r7, #14]
 8002680:	2b40      	cmp	r3, #64	; 0x40
 8002682:	d12d      	bne.n	80026e0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b22      	cmp	r3, #34	; 0x22
 8002688:	d12a      	bne.n	80026e0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d108      	bne.n	80026a6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80026a4:	e01c      	b.n	80026e0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d103      	bne.n	80026ba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f880 	bl	80027b8 <I2C_MemoryTransmit_TXE_BTF>
}
 80026b8:	e012      	b.n	80026e0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026de:	e7ff      	b.n	80026e0 <I2C_MasterTransmit_TXE+0x130>
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b21      	cmp	r3, #33	; 0x21
 8002700:	d156      	bne.n	80027b0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002730:	e03e      	b.n	80027b0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d01d      	beq.n	8002774 <I2C_MasterTransmit_BTF+0x8c>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b20      	cmp	r3, #32
 800273c:	d01a      	beq.n	8002774 <I2C_MasterTransmit_BTF+0x8c>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002744:	d016      	beq.n	8002774 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002754:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2211      	movs	r2, #17
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff feab 	bl	80024c8 <HAL_I2C_MasterTxCpltCallback>
}
 8002772:	e01d      	b.n	80027b0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002782:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fe8c 	bl	80024c8 <HAL_I2C_MasterTxCpltCallback>
}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d11d      	bne.n	800280c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10b      	bne.n	80027f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e8:	1c9a      	adds	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80027ee:	e06e      	b.n	80028ce <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	121b      	asrs	r3, r3, #8
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	651a      	str	r2, [r3, #80]	; 0x50
}
 800280a:	e060      	b.n	80028ce <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002810:	2b01      	cmp	r3, #1
 8002812:	d10b      	bne.n	800282c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	b2da      	uxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	651a      	str	r2, [r3, #80]	; 0x50
}
 800282a:	e050      	b.n	80028ce <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002830:	2b02      	cmp	r3, #2
 8002832:	d14c      	bne.n	80028ce <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b22      	cmp	r3, #34	; 0x22
 8002838:	d108      	bne.n	800284c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	e040      	b.n	80028ce <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b21      	cmp	r3, #33	; 0x21
 800285a:	d112      	bne.n	8002882 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002880:	e025      	b.n	80028ce <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d120      	bne.n	80028ce <I2C_MemoryTransmit_TXE_BTF+0x116>
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b21      	cmp	r3, #33	; 0x21
 8002890:	d11d      	bne.n	80028ce <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028a0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fe3d 	bl	8002548 <HAL_I2C_MemTxCpltCallback>
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b22      	cmp	r3, #34	; 0x22
 80028e8:	f040 80a2 	bne.w	8002a30 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d921      	bls.n	800293e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b03      	cmp	r3, #3
 8002928:	f040 8082 	bne.w	8002a30 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800293c:	e078      	b.n	8002a30 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	2b02      	cmp	r3, #2
 8002944:	d074      	beq.n	8002a30 <I2C_MasterReceive_RXNE+0x15a>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d002      	beq.n	8002952 <I2C_MasterReceive_RXNE+0x7c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d16e      	bne.n	8002a30 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f001 fac0 	bl	8003ed8 <I2C_WaitOnSTOPRequestThroughIT>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d142      	bne.n	80029e4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800297c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b40      	cmp	r3, #64	; 0x40
 80029b6:	d10a      	bne.n	80029ce <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff fdc8 	bl	800255c <HAL_I2C_MemRxCpltCallback>
}
 80029cc:	e030      	b.n	8002a30 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2212      	movs	r2, #18
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fd7d 	bl	80024dc <HAL_I2C_MasterRxCpltCallback>
}
 80029e2:	e025      	b.n	8002a30 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fda0 	bl	8002570 <HAL_I2C_ErrorCallback>
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d11b      	bne.n	8002a88 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002a86:	e0bd      	b.n	8002c04 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d129      	bne.n	8002ae6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d00a      	beq.n	8002abe <I2C_MasterReceive_BTF+0x86>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d007      	beq.n	8002abe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ae4:	e08e      	b.n	8002c04 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d176      	bne.n	8002bde <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d002      	beq.n	8002afc <I2C_MasterReceive_BTF+0xc4>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d108      	bne.n	8002b0e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e019      	b.n	8002b42 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d002      	beq.n	8002b1a <I2C_MasterReceive_BTF+0xe2>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d108      	bne.n	8002b2c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e00a      	b.n	8002b42 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d007      	beq.n	8002b42 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b9c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d10a      	bne.n	8002bc8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fccb 	bl	800255c <HAL_I2C_MemRxCpltCallback>
}
 8002bc6:	e01d      	b.n	8002c04 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2212      	movs	r2, #18
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff fc80 	bl	80024dc <HAL_I2C_MasterRxCpltCallback>
}
 8002bdc:	e012      	b.n	8002c04 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d117      	bne.n	8002c50 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c38:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002c3a:	e067      	b.n	8002d0c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]
}
 8002c4e:	e05d      	b.n	8002d0c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c58:	d133      	bne.n	8002cc2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b21      	cmp	r3, #33	; 0x21
 8002c64:	d109      	bne.n	8002c7a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c76:	611a      	str	r2, [r3, #16]
 8002c78:	e008      	b.n	8002c8c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <I2C_Master_SB+0x92>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d108      	bne.n	8002cb0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d032      	beq.n	8002d0c <I2C_Master_SB+0x100>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d02d      	beq.n	8002d0c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbe:	605a      	str	r2, [r3, #4]
}
 8002cc0:	e024      	b.n	8002d0c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10e      	bne.n	8002ce8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	11db      	asrs	r3, r3, #7
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 0306 	and.w	r3, r3, #6
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f063 030f 	orn	r3, r3, #15
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	611a      	str	r2, [r3, #16]
}
 8002ce6:	e011      	b.n	8002d0c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10d      	bne.n	8002d0c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	11db      	asrs	r3, r3, #7
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f003 0306 	and.w	r3, r3, #6
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f063 030e 	orn	r3, r3, #14
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	611a      	str	r2, [r3, #16]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d004      	beq.n	8002d3e <I2C_Master_ADD10+0x26>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d108      	bne.n	8002d50 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00c      	beq.n	8002d60 <I2C_Master_ADD10+0x48>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5e:	605a      	str	r2, [r3, #4]
  }
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b091      	sub	sp, #68	; 0x44
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b22      	cmp	r3, #34	; 0x22
 8002d94:	f040 8169 	bne.w	800306a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10f      	bne.n	8002dc0 <I2C_Master_ADDR+0x54>
 8002da0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d10b      	bne.n	8002dc0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da8:	2300      	movs	r3, #0
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	633b      	str	r3, [r7, #48]	; 0x30
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	e160      	b.n	8003082 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11d      	bne.n	8002e04 <I2C_Master_ADDR+0x98>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dd0:	d118      	bne.n	8002e04 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	651a      	str	r2, [r3, #80]	; 0x50
 8002e02:	e13e      	b.n	8003082 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d113      	bne.n	8002e36 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e115      	b.n	8003062 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	f040 808a 	bne.w	8002f56 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e48:	d137      	bne.n	8002eba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e58:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e68:	d113      	bne.n	8002e92 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e78:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	e0e7      	b.n	8003062 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	623b      	str	r3, [r7, #32]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e0d3      	b.n	8003062 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d02e      	beq.n	8002f1e <I2C_Master_ADDR+0x1b2>
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d02b      	beq.n	8002f1e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	2b12      	cmp	r3, #18
 8002eca:	d102      	bne.n	8002ed2 <I2C_Master_ADDR+0x166>
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d125      	bne.n	8002f1e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d00e      	beq.n	8002ef6 <I2C_Master_ADDR+0x18a>
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d00b      	beq.n	8002ef6 <I2C_Master_ADDR+0x18a>
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d008      	beq.n	8002ef6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e007      	b.n	8002f06 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f04:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	e0a1      	b.n	8003062 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e085      	b.n	8003062 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d14d      	bne.n	8002ffc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d016      	beq.n	8002f94 <I2C_Master_ADDR+0x228>
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d013      	beq.n	8002f94 <I2C_Master_ADDR+0x228>
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d010      	beq.n	8002f94 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e007      	b.n	8002fa4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fa2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb2:	d117      	bne.n	8002fe4 <I2C_Master_ADDR+0x278>
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fba:	d00b      	beq.n	8002fd4 <I2C_Master_ADDR+0x268>
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d008      	beq.n	8002fd4 <I2C_Master_ADDR+0x268>
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d005      	beq.n	8002fd4 <I2C_Master_ADDR+0x268>
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d002      	beq.n	8002fd4 <I2C_Master_ADDR+0x268>
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d107      	bne.n	8002fe4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fe2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	e032      	b.n	8003062 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800300a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301a:	d117      	bne.n	800304c <I2C_Master_ADDR+0x2e0>
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003022:	d00b      	beq.n	800303c <I2C_Master_ADDR+0x2d0>
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	2b01      	cmp	r3, #1
 8003028:	d008      	beq.n	800303c <I2C_Master_ADDR+0x2d0>
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	2b08      	cmp	r3, #8
 800302e:	d005      	beq.n	800303c <I2C_Master_ADDR+0x2d0>
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	2b10      	cmp	r3, #16
 8003034:	d002      	beq.n	800303c <I2C_Master_ADDR+0x2d0>
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	2b20      	cmp	r3, #32
 800303a:	d107      	bne.n	800304c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800304a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003068:	e00b      	b.n	8003082 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	e7ff      	b.n	8003082 <I2C_Master_ADDR+0x316>
 8003082:	bf00      	nop
 8003084:	3744      	adds	r7, #68	; 0x44
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d02b      	beq.n	8003100 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d114      	bne.n	8003100 <I2C_SlaveTransmit_TXE+0x72>
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b29      	cmp	r3, #41	; 0x29
 80030da:	d111      	bne.n	8003100 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2221      	movs	r2, #33	; 0x21
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2228      	movs	r2, #40	; 0x28
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff f9f8 	bl	80024f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d011      	beq.n	800313e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02c      	beq.n	80031be <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d114      	bne.n	80031be <I2C_SlaveReceive_RXNE+0x74>
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b2a      	cmp	r3, #42	; 0x2a
 8003198:	d111      	bne.n	80031be <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2222      	movs	r2, #34	; 0x22
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2228      	movs	r2, #40	; 0x28
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff f9a3 	bl	8002504 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d012      	beq.n	80031fe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003224:	2b28      	cmp	r3, #40	; 0x28
 8003226:	d127      	bne.n	8003278 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003236:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	09db      	lsrs	r3, r3, #7
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	81bb      	strh	r3, [r7, #12]
 800325a:	e002      	b.n	8003262 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800326a:	89ba      	ldrh	r2, [r7, #12]
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff f951 	bl	8002518 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003276:	e008      	b.n	800328a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0202 	mvn.w	r2, #2
 8003280:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80032b4:	2300      	movs	r3, #0
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f0:	d172      	bne.n	80033d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b22      	cmp	r3, #34	; 0x22
 80032f6:	d002      	beq.n	80032fe <I2C_Slave_STOPF+0x6a>
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b2a      	cmp	r3, #42	; 0x2a
 80032fc:	d135      	bne.n	800336a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f043 0204 	orr.w	r2, r3, #4
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003330:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd ff58 	bl	80011ec <HAL_DMA_GetState>
 800333c:	4603      	mov	r3, r0
 800333e:	2b01      	cmp	r3, #1
 8003340:	d049      	beq.n	80033d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	4a69      	ldr	r2, [pc, #420]	; (80034ec <I2C_Slave_STOPF+0x258>)
 8003348:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd ff2a 	bl	80011a8 <HAL_DMA_Abort_IT>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d03d      	beq.n	80033d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003364:	4610      	mov	r0, r2
 8003366:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003368:	e035      	b.n	80033d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	b29a      	uxth	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0204 	orr.w	r2, r3, #4
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800339c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd ff22 	bl	80011ec <HAL_DMA_GetState>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d014      	beq.n	80033d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	4a4e      	ldr	r2, [pc, #312]	; (80034ec <I2C_Slave_STOPF+0x258>)
 80033b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd fef4 	bl	80011a8 <HAL_DMA_Abort_IT>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033d0:	4610      	mov	r0, r2
 80033d2:	4798      	blx	r3
 80033d4:	e000      	b.n	80033d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d03e      	beq.n	8003460 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d112      	bne.n	8003416 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d112      	bne.n	800344a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f8b3 	bl	80035d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800346e:	e039      	b.n	80034e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b2a      	cmp	r3, #42	; 0x2a
 8003474:	d109      	bne.n	800348a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2228      	movs	r2, #40	; 0x28
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff f83d 	bl	8002504 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b28      	cmp	r3, #40	; 0x28
 8003494:	d111      	bne.n	80034ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <I2C_Slave_STOPF+0x25c>)
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff f83e 	bl	8002534 <HAL_I2C_ListenCpltCallback>
}
 80034b8:	e014      	b.n	80034e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	2b22      	cmp	r3, #34	; 0x22
 80034c0:	d002      	beq.n	80034c8 <I2C_Slave_STOPF+0x234>
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b22      	cmp	r3, #34	; 0x22
 80034c6:	d10d      	bne.n	80034e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff f810 	bl	8002504 <HAL_I2C_SlaveRxCpltCallback>
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	08003ad9 	.word	0x08003ad9
 80034f0:	ffff0000 	.word	0xffff0000

080034f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003502:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d002      	beq.n	8003516 <I2C_Slave_AF+0x22>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b20      	cmp	r3, #32
 8003514:	d129      	bne.n	800356a <I2C_Slave_AF+0x76>
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b28      	cmp	r3, #40	; 0x28
 800351a:	d126      	bne.n	800356a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <I2C_Slave_AF+0xdc>)
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003530:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800353a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fe ffe6 	bl	8002534 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003568:	e02e      	b.n	80035c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b21      	cmp	r3, #33	; 0x21
 800356e:	d126      	bne.n	80035be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a17      	ldr	r2, [pc, #92]	; (80035d0 <I2C_Slave_AF+0xdc>)
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800359a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fe ff9a 	bl	80024f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80035bc:	e004      	b.n	80035c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035c6:	615a      	str	r2, [r3, #20]
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	ffff0000 	.word	0xffff0000

080035d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035ec:	7bbb      	ldrb	r3, [r7, #14]
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d002      	beq.n	80035f8 <I2C_ITError+0x24>
 80035f2:	7bbb      	ldrb	r3, [r7, #14]
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d10a      	bne.n	800360e <I2C_ITError+0x3a>
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b22      	cmp	r3, #34	; 0x22
 80035fc:	d107      	bne.n	800360e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003614:	2b28      	cmp	r3, #40	; 0x28
 8003616:	d107      	bne.n	8003628 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2228      	movs	r2, #40	; 0x28
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003626:	e015      	b.n	8003654 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003636:	d00a      	beq.n	800364e <I2C_ITError+0x7a>
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b60      	cmp	r3, #96	; 0x60
 800363c:	d007      	beq.n	800364e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003662:	d162      	bne.n	800372a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003672:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d020      	beq.n	80036c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	4a6a      	ldr	r2, [pc, #424]	; (8003830 <I2C_ITError+0x25c>)
 8003688:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fd8a 	bl	80011a8 <HAL_DMA_Abort_IT>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8089 	beq.w	80037ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036be:	4610      	mov	r0, r2
 80036c0:	4798      	blx	r3
 80036c2:	e074      	b.n	80037ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	4a59      	ldr	r2, [pc, #356]	; (8003830 <I2C_ITError+0x25c>)
 80036ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd fd69 	bl	80011a8 <HAL_DMA_Abort_IT>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d068      	beq.n	80037ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d10b      	bne.n	8003702 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003724:	4610      	mov	r0, r2
 8003726:	4798      	blx	r3
 8003728:	e041      	b.n	80037ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b60      	cmp	r3, #96	; 0x60
 8003734:	d125      	bne.n	8003782 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d10b      	bne.n	800376a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe ff02 	bl	8002584 <HAL_I2C_AbortCpltCallback>
 8003780:	e015      	b.n	80037ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d10b      	bne.n	80037a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fe fee1 	bl	8002570 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10e      	bne.n	80037dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d104      	bne.n	80037dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d113      	bne.n	8003828 <I2C_ITError+0x254>
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b28      	cmp	r3, #40	; 0x28
 8003804:	d110      	bne.n	8003828 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <I2C_ITError+0x260>)
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fe fe86 	bl	8002534 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	08003ad9 	.word	0x08003ad9
 8003834:	ffff0000 	.word	0xffff0000

08003838 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	460b      	mov	r3, r1
 8003846:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d006      	beq.n	8003862 <I2C_MasterRequestWrite+0x2a>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d003      	beq.n	8003862 <I2C_MasterRequestWrite+0x2a>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003860:	d108      	bne.n	8003874 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e00b      	b.n	800388c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	2b12      	cmp	r3, #18
 800387a:	d107      	bne.n	800388c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f9c5 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b2:	d103      	bne.n	80038bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e035      	b.n	800392c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c8:	d108      	bne.n	80038dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ca:	897b      	ldrh	r3, [r7, #10]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038d8:	611a      	str	r2, [r3, #16]
 80038da:	e01b      	b.n	8003914 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038dc:	897b      	ldrh	r3, [r7, #10]
 80038de:	11db      	asrs	r3, r3, #7
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 0306 	and.w	r3, r3, #6
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f063 030f 	orn	r3, r3, #15
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	490e      	ldr	r1, [pc, #56]	; (8003934 <I2C_MasterRequestWrite+0xfc>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f9eb 	bl	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e010      	b.n	800392c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4907      	ldr	r1, [pc, #28]	; (8003938 <I2C_MasterRequestWrite+0x100>)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f9db 	bl	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	00010008 	.word	0x00010008
 8003938:	00010002 	.word	0x00010002

0800393c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	460b      	mov	r3, r1
 800394a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003960:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d006      	beq.n	8003976 <I2C_MasterRequestRead+0x3a>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d003      	beq.n	8003976 <I2C_MasterRequestRead+0x3a>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003974:	d108      	bne.n	8003988 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e00b      	b.n	80039a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	2b11      	cmp	r3, #17
 800398e:	d107      	bne.n	80039a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f93b 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d103      	bne.n	80039d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e079      	b.n	8003ac8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039dc:	d108      	bne.n	80039f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039de:	897b      	ldrh	r3, [r7, #10]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]
 80039ee:	e05f      	b.n	8003ab0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039f0:	897b      	ldrh	r3, [r7, #10]
 80039f2:	11db      	asrs	r3, r3, #7
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0306 	and.w	r3, r3, #6
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f063 030f 	orn	r3, r3, #15
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4930      	ldr	r1, [pc, #192]	; (8003ad0 <I2C_MasterRequestRead+0x194>)
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f961 	bl	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e054      	b.n	8003ac8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a1e:	897b      	ldrh	r3, [r7, #10]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4929      	ldr	r1, [pc, #164]	; (8003ad4 <I2C_MasterRequestRead+0x198>)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f951 	bl	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e044      	b.n	8003ac8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f8d9 	bl	8003c28 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8a:	d103      	bne.n	8003a94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e017      	b.n	8003ac8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a98:	897b      	ldrh	r3, [r7, #10]
 8003a9a:	11db      	asrs	r3, r3, #7
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f003 0306 	and.w	r3, r3, #6
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f063 030e 	orn	r3, r3, #14
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4907      	ldr	r1, [pc, #28]	; (8003ad4 <I2C_MasterRequestRead+0x198>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f90d 	bl	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	00010008 	.word	0x00010008
 8003ad4:	00010002 	.word	0x00010002

08003ad8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003af2:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <I2C_DMAAbort+0x148>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	08db      	lsrs	r3, r3, #3
 8003af8:	4a4a      	ldr	r2, [pc, #296]	; (8003c24 <I2C_DMAAbort+0x14c>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0a1a      	lsrs	r2, r3, #8
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	00da      	lsls	r2, r3, #3
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003b1e:	e00a      	b.n	8003b36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d0ea      	beq.n	8003b0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b42:	2200      	movs	r2, #0
 8003b44:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	2200      	movs	r2, #0
 8003b54:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	2200      	movs	r2, #0
 8003b7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	2200      	movs	r2, #0
 8003b8a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b60      	cmp	r3, #96	; 0x60
 8003ba6:	d10e      	bne.n	8003bc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	f7fe fce0 	bl	8002584 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bc4:	e027      	b.n	8003c16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bcc:	2b28      	cmp	r3, #40	; 0x28
 8003bce:	d117      	bne.n	8003c00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2228      	movs	r2, #40	; 0x28
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bfe:	e007      	b.n	8003c10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c10:	6978      	ldr	r0, [r7, #20]
 8003c12:	f7fe fcad 	bl	8002570 <HAL_I2C_ErrorCallback>
}
 8003c16:	bf00      	nop
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000000 	.word	0x20000000
 8003c24:	14f8b589 	.word	0x14f8b589

08003c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c38:	e025      	b.n	8003c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d021      	beq.n	8003c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fd f9c3 	bl	8000fcc <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d116      	bne.n	8003c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f043 0220 	orr.w	r2, r3, #32
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e023      	b.n	8003cce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d10d      	bne.n	8003cac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	43da      	mvns	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	e00c      	b.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d0b6      	beq.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ce4:	e051      	b.n	8003d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d123      	bne.n	8003d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f043 0204 	orr.w	r2, r3, #4
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e046      	b.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d021      	beq.n	8003d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fd f941 	bl	8000fcc <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d116      	bne.n	8003d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f043 0220 	orr.w	r2, r3, #32
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e020      	b.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	0c1b      	lsrs	r3, r3, #16
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d10c      	bne.n	8003dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf14      	ite	ne
 8003da6:	2301      	movne	r3, #1
 8003da8:	2300      	moveq	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	e00b      	b.n	8003dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	43da      	mvns	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf14      	ite	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	2300      	moveq	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d18d      	bne.n	8003ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de0:	e02d      	b.n	8003e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f900 	bl	8003fe8 <I2C_IsAcknowledgeFailed>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e02d      	b.n	8003e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d021      	beq.n	8003e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfa:	f7fd f8e7 	bl	8000fcc <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d116      	bne.n	8003e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f043 0220 	orr.w	r2, r3, #32
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e007      	b.n	8003e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d1ca      	bne.n	8003de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e62:	e02d      	b.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8bf 	bl	8003fe8 <I2C_IsAcknowledgeFailed>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e02d      	b.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d021      	beq.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7c:	f7fd f8a6 	bl	8000fcc <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d116      	bne.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	f043 0220 	orr.w	r2, r3, #32
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e007      	b.n	8003ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d1ca      	bne.n	8003e64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ee4:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	08db      	lsrs	r3, r3, #3
 8003eea:	4a13      	ldr	r2, [pc, #76]	; (8003f38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	0a1a      	lsrs	r2, r3, #8
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d107      	bne.n	8003f16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e008      	b.n	8003f28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f24:	d0e9      	beq.n	8003efa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	20000000 	.word	0x20000000
 8003f38:	14f8b589 	.word	0x14f8b589

08003f3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f48:	e042      	b.n	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d119      	bne.n	8003f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0210 	mvn.w	r2, #16
 8003f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e029      	b.n	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7fd f81e 	bl	8000fcc <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d116      	bne.n	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e007      	b.n	8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d1b5      	bne.n	8003f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffe:	d11b      	bne.n	8004038 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004008:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	f043 0204 	orr.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004056:	d103      	bne.n	8004060 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800405e:	e007      	b.n	8004070 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004068:	d102      	bne.n	8004070 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2208      	movs	r2, #8
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e264      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d075      	beq.n	8004186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409a:	4ba3      	ldr	r3, [pc, #652]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d00c      	beq.n	80040c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a6:	4ba0      	ldr	r3, [pc, #640]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d112      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b2:	4b9d      	ldr	r3, [pc, #628]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040be:	d10b      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	4b99      	ldr	r3, [pc, #612]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05b      	beq.n	8004184 <HAL_RCC_OscConfig+0x108>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d157      	bne.n	8004184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e23f      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e0:	d106      	bne.n	80040f0 <HAL_RCC_OscConfig+0x74>
 80040e2:	4b91      	ldr	r3, [pc, #580]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a90      	ldr	r2, [pc, #576]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e01d      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x98>
 80040fa:	4b8b      	ldr	r3, [pc, #556]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a8a      	ldr	r2, [pc, #552]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a87      	ldr	r2, [pc, #540]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 8004114:	4b84      	ldr	r3, [pc, #528]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a83      	ldr	r2, [pc, #524]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b81      	ldr	r3, [pc, #516]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a80      	ldr	r2, [pc, #512]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fc ff4a 	bl	8000fcc <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413c:	f7fc ff46 	bl	8000fcc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	; 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e204      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b76      	ldr	r3, [pc, #472]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0xc0>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fc ff36 	bl	8000fcc <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7fc ff32 	bl	8000fcc <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1f0      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	4b6c      	ldr	r3, [pc, #432]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0xe8>
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d063      	beq.n	800425a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004192:	4b65      	ldr	r3, [pc, #404]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419e:	4b62      	ldr	r3, [pc, #392]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d11c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041aa:	4b5f      	ldr	r3, [pc, #380]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d116      	bne.n	80041e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	4b5c      	ldr	r3, [pc, #368]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_RCC_OscConfig+0x152>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e1c4      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b56      	ldr	r3, [pc, #344]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4952      	ldr	r1, [pc, #328]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e2:	e03a      	b.n	800425a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ec:	4b4f      	ldr	r3, [pc, #316]	; (800432c <HAL_RCC_OscConfig+0x2b0>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fc feeb 	bl	8000fcc <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fc fee7 	bl	8000fcc <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1a5      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4940      	ldr	r1, [pc, #256]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]
 800422c:	e015      	b.n	800425a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422e:	4b3f      	ldr	r3, [pc, #252]	; (800432c <HAL_RCC_OscConfig+0x2b0>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fc feca 	bl	8000fcc <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423c:	f7fc fec6 	bl	8000fcc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e184      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d030      	beq.n	80042c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCC_OscConfig+0x2b4>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fc feaa 	bl	8000fcc <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427c:	f7fc fea6 	bl	8000fcc <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e164      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x200>
 800429a:	e015      	b.n	80042c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x2b4>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a2:	f7fc fe93 	bl	8000fcc <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042aa:	f7fc fe8f 	bl	8000fcc <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e14d      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a0 	beq.w	8004416 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x2b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d121      	bne.n	8004356 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_RCC_OscConfig+0x2b8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a07      	ldr	r2, [pc, #28]	; (8004334 <HAL_RCC_OscConfig+0x2b8>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431e:	f7fc fe55 	bl	8000fcc <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	e011      	b.n	800434a <HAL_RCC_OscConfig+0x2ce>
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	42470000 	.word	0x42470000
 8004330:	42470e80 	.word	0x42470e80
 8004334:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fc fe48 	bl	8000fcc <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e106      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434a:	4b85      	ldr	r3, [pc, #532]	; (8004560 <HAL_RCC_OscConfig+0x4e4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d106      	bne.n	800436c <HAL_RCC_OscConfig+0x2f0>
 800435e:	4b81      	ldr	r3, [pc, #516]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a80      	ldr	r2, [pc, #512]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	e01c      	b.n	80043a6 <HAL_RCC_OscConfig+0x32a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d10c      	bne.n	800438e <HAL_RCC_OscConfig+0x312>
 8004374:	4b7b      	ldr	r3, [pc, #492]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a7a      	ldr	r2, [pc, #488]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	4b78      	ldr	r3, [pc, #480]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a77      	ldr	r2, [pc, #476]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e00b      	b.n	80043a6 <HAL_RCC_OscConfig+0x32a>
 800438e:	4b75      	ldr	r3, [pc, #468]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a74      	ldr	r2, [pc, #464]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
 800439a:	4b72      	ldr	r3, [pc, #456]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a71      	ldr	r2, [pc, #452]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fc fe0d 	bl	8000fcc <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fc fe09 	bl	8000fcc <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0c5      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	4b65      	ldr	r3, [pc, #404]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCC_OscConfig+0x33a>
 80043d8:	e014      	b.n	8004404 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fc fdf7 	bl	8000fcc <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fc fdf3 	bl	8000fcc <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0af      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ee      	bne.n	80043e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b56      	ldr	r3, [pc, #344]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a55      	ldr	r2, [pc, #340]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 809b 	beq.w	8004556 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004420:	4b50      	ldr	r3, [pc, #320]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b08      	cmp	r3, #8
 800442a:	d05c      	beq.n	80044e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d141      	bne.n	80044b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004434:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <HAL_RCC_OscConfig+0x4ec>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fc fdc7 	bl	8000fcc <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fc fdc3 	bl	8000fcc <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e081      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004454:	4b43      	ldr	r3, [pc, #268]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	019b      	lsls	r3, r3, #6
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	3b01      	subs	r3, #1
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	4937      	ldr	r1, [pc, #220]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004486:	4313      	orrs	r3, r2
 8004488:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCC_OscConfig+0x4ec>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fc fd9c 	bl	8000fcc <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004498:	f7fc fd98 	bl	8000fcc <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e056      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x41c>
 80044b6:	e04e      	b.n	8004556 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <HAL_RCC_OscConfig+0x4ec>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fc fd85 	bl	8000fcc <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fc fd81 	bl	8000fcc <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e03f      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x44a>
 80044e4:	e037      	b.n	8004556 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e032      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d028      	beq.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d121      	bne.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d11a      	bne.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004522:	4013      	ands	r3, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004528:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800452a:	4293      	cmp	r3, r2
 800452c:	d111      	bne.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	3b01      	subs	r3, #1
 800453c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d107      	bne.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40007000 	.word	0x40007000
 8004564:	40023800 	.word	0x40023800
 8004568:	42470060 	.word	0x42470060

0800456c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0cc      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004580:	4b68      	ldr	r3, [pc, #416]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d90c      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b65      	ldr	r3, [pc, #404]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b63      	ldr	r3, [pc, #396]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0b8      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d020      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c0:	4b59      	ldr	r3, [pc, #356]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a58      	ldr	r2, [pc, #352]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d8:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a52      	ldr	r2, [pc, #328]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b50      	ldr	r3, [pc, #320]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	494d      	ldr	r1, [pc, #308]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d044      	beq.n	800468c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b47      	ldr	r3, [pc, #284]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d119      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e07f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d003      	beq.n	800462a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004626:	2b03      	cmp	r3, #3
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e06f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463a:	4b3b      	ldr	r3, [pc, #236]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e067      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464a:	4b37      	ldr	r3, [pc, #220]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f023 0203 	bic.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4934      	ldr	r1, [pc, #208]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	4313      	orrs	r3, r2
 800465a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800465c:	f7fc fcb6 	bl	8000fcc <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	e00a      	b.n	800467a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004664:	f7fc fcb2 	bl	8000fcc <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e04f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 020c 	and.w	r2, r3, #12
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	429a      	cmp	r2, r3
 800468a:	d1eb      	bne.n	8004664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800468c:	4b25      	ldr	r3, [pc, #148]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d20c      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469a:	4b22      	ldr	r3, [pc, #136]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b20      	ldr	r3, [pc, #128]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e032      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b19      	ldr	r3, [pc, #100]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4916      	ldr	r1, [pc, #88]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	490e      	ldr	r1, [pc, #56]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f2:	f000 f821 	bl	8004738 <HAL_RCC_GetSysClockFreq>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	490a      	ldr	r1, [pc, #40]	; (800472c <HAL_RCC_ClockConfig+0x1c0>)
 8004704:	5ccb      	ldrb	r3, [r1, r3]
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	4a09      	ldr	r2, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCC_ClockConfig+0x1c8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc fb5a 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40023c00 	.word	0x40023c00
 8004728:	40023800 	.word	0x40023800
 800472c:	08007b48 	.word	0x08007b48
 8004730:	20000000 	.word	0x20000000
 8004734:	20000004 	.word	0x20000004

08004738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	2300      	movs	r3, #0
 800474a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004750:	4b67      	ldr	r3, [pc, #412]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b08      	cmp	r3, #8
 800475a:	d00d      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x40>
 800475c:	2b08      	cmp	r3, #8
 800475e:	f200 80bd 	bhi.w	80048dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x34>
 8004766:	2b04      	cmp	r3, #4
 8004768:	d003      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0x3a>
 800476a:	e0b7      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800476e:	60bb      	str	r3, [r7, #8]
       break;
 8004770:	e0b7      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004772:	4b61      	ldr	r3, [pc, #388]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004774:	60bb      	str	r3, [r7, #8]
      break;
 8004776:	e0b4      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004778:	4b5d      	ldr	r3, [pc, #372]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004780:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004782:	4b5b      	ldr	r3, [pc, #364]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04d      	beq.n	800482a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478e:	4b58      	ldr	r3, [pc, #352]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	099b      	lsrs	r3, r3, #6
 8004794:	461a      	mov	r2, r3
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	ea02 0800 	and.w	r8, r2, r0
 80047a6:	ea03 0901 	and.w	r9, r3, r1
 80047aa:	4640      	mov	r0, r8
 80047ac:	4649      	mov	r1, r9
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	014b      	lsls	r3, r1, #5
 80047b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047bc:	0142      	lsls	r2, r0, #5
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	ebb0 0008 	subs.w	r0, r0, r8
 80047c6:	eb61 0109 	sbc.w	r1, r1, r9
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	018b      	lsls	r3, r1, #6
 80047d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047d8:	0182      	lsls	r2, r0, #6
 80047da:	1a12      	subs	r2, r2, r0
 80047dc:	eb63 0301 	sbc.w	r3, r3, r1
 80047e0:	f04f 0000 	mov.w	r0, #0
 80047e4:	f04f 0100 	mov.w	r1, #0
 80047e8:	00d9      	lsls	r1, r3, #3
 80047ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047ee:	00d0      	lsls	r0, r2, #3
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	eb12 0208 	adds.w	r2, r2, r8
 80047f8:	eb43 0309 	adc.w	r3, r3, r9
 80047fc:	f04f 0000 	mov.w	r0, #0
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	0259      	lsls	r1, r3, #9
 8004806:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800480a:	0250      	lsls	r0, r2, #9
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4610      	mov	r0, r2
 8004812:	4619      	mov	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	461a      	mov	r2, r3
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	f7fb fcd8 	bl	80001d0 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4613      	mov	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e04a      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	461a      	mov	r2, r3
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	f240 10ff 	movw	r0, #511	; 0x1ff
 800483a:	f04f 0100 	mov.w	r1, #0
 800483e:	ea02 0400 	and.w	r4, r2, r0
 8004842:	ea03 0501 	and.w	r5, r3, r1
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	014b      	lsls	r3, r1, #5
 8004854:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004858:	0142      	lsls	r2, r0, #5
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	1b00      	subs	r0, r0, r4
 8004860:	eb61 0105 	sbc.w	r1, r1, r5
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	018b      	lsls	r3, r1, #6
 800486e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004872:	0182      	lsls	r2, r0, #6
 8004874:	1a12      	subs	r2, r2, r0
 8004876:	eb63 0301 	sbc.w	r3, r3, r1
 800487a:	f04f 0000 	mov.w	r0, #0
 800487e:	f04f 0100 	mov.w	r1, #0
 8004882:	00d9      	lsls	r1, r3, #3
 8004884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004888:	00d0      	lsls	r0, r2, #3
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	1912      	adds	r2, r2, r4
 8004890:	eb45 0303 	adc.w	r3, r5, r3
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	0299      	lsls	r1, r3, #10
 800489e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048a2:	0290      	lsls	r0, r2, #10
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	f7fb fc8c 	bl	80001d0 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4613      	mov	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	60bb      	str	r3, [r7, #8]
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048de:	60bb      	str	r3, [r7, #8]
      break;
 80048e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e2:	68bb      	ldr	r3, [r7, #8]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00f42400 	.word	0x00f42400
 80048f8:	007a1200 	.word	0x007a1200

080048fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <HAL_RCC_GetHCLKFreq+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000000 	.word	0x20000000

08004914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004918:	f7ff fff0 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	08007b58 	.word	0x08007b58

0800493c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004940:	f7ff ffdc 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0b5b      	lsrs	r3, r3, #13
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	08007b58 	.word	0x08007b58

08004964 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	220f      	movs	r2, #15
 8004972:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0203 	and.w	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049a6:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <HAL_RCC_GetClockConfig+0x60>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0207 	and.w	r2, r3, #7
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40023c00 	.word	0x40023c00

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e041      	b.n	8004a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f839 	bl	8004a66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 f9d8 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d001      	beq.n	8004a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e04e      	b.n	8004b32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a23      	ldr	r2, [pc, #140]	; (8004b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d022      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d01d      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d018      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00e      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d009      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d111      	bne.n	8004b20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d010      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	e007      	b.n	8004b30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40001800 	.word	0x40001800

08004b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d122      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0202 	mvn.w	r2, #2
 8004b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8ee 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8e0 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8f1 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d122      	bne.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d11b      	bne.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0204 	mvn.w	r2, #4
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8c4 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f8b6 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f8c7 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d122      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d11b      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0208 	mvn.w	r2, #8
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f89a 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f88c 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f89d 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d122      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d11b      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0210 	mvn.w	r2, #16
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f870 	bl	8004d80 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f862 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f873 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0201 	mvn.w	r2, #1
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fb ffb8 	bl	8000c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d10e      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf8:	2b80      	cmp	r3, #128	; 0x80
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f902 	bl	8004f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f838 	bl	8004da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d10e      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0220 	mvn.w	r2, #32
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8cc 	bl	8004efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a40      	ldr	r2, [pc, #256]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d013      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3d      	ldr	r2, [pc, #244]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3b      	ldr	r2, [pc, #236]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3a      	ldr	r2, [pc, #232]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2f      	ldr	r2, [pc, #188]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d027      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <TIM_Base_SetConfig+0x118>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d023      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2b      	ldr	r2, [pc, #172]	; (8004ed8 <TIM_Base_SetConfig+0x11c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <TIM_Base_SetConfig+0x120>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a29      	ldr	r2, [pc, #164]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a28      	ldr	r2, [pc, #160]	; (8004ee4 <TIM_Base_SetConfig+0x128>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a27      	ldr	r2, [pc, #156]	; (8004ee8 <TIM_Base_SetConfig+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a26      	ldr	r2, [pc, #152]	; (8004eec <TIM_Base_SetConfig+0x130>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <TIM_Base_SetConfig+0x134>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a24      	ldr	r2, [pc, #144]	; (8004ef4 <TIM_Base_SetConfig+0x138>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a23      	ldr	r2, [pc, #140]	; (8004ef8 <TIM_Base_SetConfig+0x13c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <TIM_Base_SetConfig+0x114>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0xf8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <TIM_Base_SetConfig+0x124>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800
 8004ef0:	40001800 	.word	0x40001800
 8004ef4:	40001c00 	.word	0x40001c00
 8004ef8:	40002000 	.word	0x40002000

08004efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <__NVIC_SetPriority>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	6039      	str	r1, [r7, #0]
 8004f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	db0a      	blt.n	8004f4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	490c      	ldr	r1, [pc, #48]	; (8004f70 <__NVIC_SetPriority+0x4c>)
 8004f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f42:	0112      	lsls	r2, r2, #4
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	440b      	add	r3, r1
 8004f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f4c:	e00a      	b.n	8004f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	4908      	ldr	r1, [pc, #32]	; (8004f74 <__NVIC_SetPriority+0x50>)
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	3b04      	subs	r3, #4
 8004f5c:	0112      	lsls	r2, r2, #4
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	440b      	add	r3, r1
 8004f62:	761a      	strb	r2, [r3, #24]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	e000e100 	.word	0xe000e100
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <SysTick_Handler+0x1c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f80:	f001 fcfe 	bl	8006980 <xTaskGetSchedulerState>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f8a:	f002 fae5 	bl	8007558 <xPortSysTickHandler>
  }
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	e000e010 	.word	0xe000e010

08004f98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f06f 0004 	mvn.w	r0, #4
 8004fa2:	f7ff ffbf 	bl	8004f24 <__NVIC_SetPriority>
#endif
}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb2:	f3ef 8305 	mrs	r3, IPSR
 8004fb6:	603b      	str	r3, [r7, #0]
  return(result);
 8004fb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fbe:	f06f 0305 	mvn.w	r3, #5
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	e00c      	b.n	8004fe0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <osKernelInitialize+0x44>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d105      	bne.n	8004fda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <osKernelInitialize+0x44>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e002      	b.n	8004fe0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fe0:	687b      	ldr	r3, [r7, #4]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	2000002c 	.word	0x2000002c

08004ff4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ffa:	f3ef 8305 	mrs	r3, IPSR
 8004ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8005000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005006:	f06f 0305 	mvn.w	r3, #5
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	e010      	b.n	8005030 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800500e:	4b0b      	ldr	r3, [pc, #44]	; (800503c <osKernelStart+0x48>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d109      	bne.n	800502a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005016:	f7ff ffbf 	bl	8004f98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800501a:	4b08      	ldr	r3, [pc, #32]	; (800503c <osKernelStart+0x48>)
 800501c:	2202      	movs	r2, #2
 800501e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005020:	f001 f866 	bl	80060f0 <vTaskStartScheduler>
      stat = osOK;
 8005024:	2300      	movs	r3, #0
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	e002      	b.n	8005030 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005030:	687b      	ldr	r3, [r7, #4]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	2000002c 	.word	0x2000002c

08005040 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b08e      	sub	sp, #56	; 0x38
 8005044:	af04      	add	r7, sp, #16
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005050:	f3ef 8305 	mrs	r3, IPSR
 8005054:	617b      	str	r3, [r7, #20]
  return(result);
 8005056:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005058:	2b00      	cmp	r3, #0
 800505a:	d17e      	bne.n	800515a <osThreadNew+0x11a>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d07b      	beq.n	800515a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005066:	2318      	movs	r3, #24
 8005068:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d045      	beq.n	8005106 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <osThreadNew+0x48>
        name = attr->name;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <osThreadNew+0x6e>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b38      	cmp	r3, #56	; 0x38
 80050a0:	d805      	bhi.n	80050ae <osThreadNew+0x6e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <osThreadNew+0x72>
        return (NULL);
 80050ae:	2300      	movs	r3, #0
 80050b0:	e054      	b.n	800515c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00e      	beq.n	80050e8 <osThreadNew+0xa8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b5b      	cmp	r3, #91	; 0x5b
 80050d0:	d90a      	bls.n	80050e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <osThreadNew+0xa8>
        mem = 1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	e010      	b.n	800510a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10c      	bne.n	800510a <osThreadNew+0xca>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d108      	bne.n	800510a <osThreadNew+0xca>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <osThreadNew+0xca>
          mem = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e001      	b.n	800510a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d110      	bne.n	8005132 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005118:	9202      	str	r2, [sp, #8]
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6a3a      	ldr	r2, [r7, #32]
 8005124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fe0c 	bl	8005d44 <xTaskCreateStatic>
 800512c:	4603      	mov	r3, r0
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e013      	b.n	800515a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d110      	bne.n	800515a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	b29a      	uxth	r2, r3
 800513c:	f107 0310 	add.w	r3, r7, #16
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fe57 	bl	8005dfe <xTaskCreate>
 8005150:	4603      	mov	r3, r0
 8005152:	2b01      	cmp	r3, #1
 8005154:	d001      	beq.n	800515a <osThreadNew+0x11a>
            hTask = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800515a:	693b      	ldr	r3, [r7, #16]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3728      	adds	r7, #40	; 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800516c:	f3ef 8305 	mrs	r3, IPSR
 8005170:	60bb      	str	r3, [r7, #8]
  return(result);
 8005172:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <osDelay+0x1c>
    stat = osErrorISR;
 8005178:	f06f 0305 	mvn.w	r3, #5
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e007      	b.n	8005190 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <osDelay+0x2c>
      vTaskDelay(ticks);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 ff7c 	bl	8006088 <vTaskDelay>
    }
  }

  return (stat);
 8005190:	68fb      	ldr	r3, [r7, #12]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80051ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a06      	ldr	r2, [pc, #24]	; (80051cc <vApplicationGetIdleTaskMemory+0x30>)
 80051b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	601a      	str	r2, [r3, #0]
}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20000030 	.word	0x20000030
 80051cc:	2000008c 	.word	0x2000008c

080051d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a07      	ldr	r2, [pc, #28]	; (80051fc <vApplicationGetTimerTaskMemory+0x2c>)
 80051e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4a06      	ldr	r2, [pc, #24]	; (8005200 <vApplicationGetTimerTaskMemory+0x30>)
 80051e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ee:	601a      	str	r2, [r3, #0]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	2000028c 	.word	0x2000028c
 8005200:	200002e8 	.word	0x200002e8

08005204 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f103 0208 	add.w	r2, r3, #8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f103 0208 	add.w	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f103 0208 	add.w	r2, r3, #8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d103      	bne.n	80052c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e00c      	b.n	80052e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3308      	adds	r3, #8
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e002      	b.n	80052d4 <vListInsert+0x2e>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d2f6      	bcs.n	80052ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6892      	ldr	r2, [r2, #8]
 800532e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6852      	ldr	r2, [r2, #4]
 8005338:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d103      	bne.n	800534c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	1e5a      	subs	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005396:	f002 f84d 	bl	8007434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	68f9      	ldr	r1, [r7, #12]
 80053a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	441a      	add	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c6:	3b01      	subs	r3, #1
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	441a      	add	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	22ff      	movs	r2, #255	; 0xff
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	22ff      	movs	r2, #255	; 0xff
 80053e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d114      	bne.n	8005416 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01a      	beq.n	800542a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3310      	adds	r3, #16
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 f903 	bl	8006604 <xTaskRemoveFromEventList>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d012      	beq.n	800542a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <xQueueGenericReset+0xcc>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	e009      	b.n	800542a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3310      	adds	r3, #16
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fef2 	bl	8005204 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3324      	adds	r3, #36	; 0x24
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff feed 	bl	8005204 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800542a:	f002 f833 	bl	8007494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800542e:	2301      	movs	r3, #1
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08e      	sub	sp, #56	; 0x38
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <xQueueGenericCreateStatic+0x52>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <xQueueGenericCreateStatic+0x56>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <xQueueGenericCreateStatic+0x58>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	623b      	str	r3, [r7, #32]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <xQueueGenericCreateStatic+0x7e>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <xQueueGenericCreateStatic+0x82>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <xQueueGenericCreateStatic+0x84>
 80054be:	2300      	movs	r3, #0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	61fb      	str	r3, [r7, #28]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054da:	2350      	movs	r3, #80	; 0x50
 80054dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b50      	cmp	r3, #80	; 0x50
 80054e2:	d00a      	beq.n	80054fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	61bb      	str	r3, [r7, #24]
}
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800550e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f805 	bl	800552c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005524:	4618      	mov	r0, r3
 8005526:	3730      	adds	r7, #48	; 0x30
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e002      	b.n	800554e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800555a:	2101      	movs	r1, #1
 800555c:	69b8      	ldr	r0, [r7, #24]
 800555e:	f7ff ff05 	bl	800536c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	78fa      	ldrb	r2, [r7, #3]
 8005566:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800556a:	bf00      	nop
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08e      	sub	sp, #56	; 0x38
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005582:	2300      	movs	r3, #0
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <xQueueGenericSend+0x32>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d103      	bne.n	80055b4 <xQueueGenericSend+0x40>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <xQueueGenericSend+0x44>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <xQueueGenericSend+0x46>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <xQueueGenericSend+0x60>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d103      	bne.n	80055e2 <xQueueGenericSend+0x6e>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <xQueueGenericSend+0x72>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueGenericSend+0x74>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <xQueueGenericSend+0x8e>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	623b      	str	r3, [r7, #32]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005602:	f001 f9bd 	bl	8006980 <xTaskGetSchedulerState>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <xQueueGenericSend+0x9e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <xQueueGenericSend+0xa2>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <xQueueGenericSend+0xa4>
 8005616:	2300      	movs	r3, #0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <xQueueGenericSend+0xbe>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	61fb      	str	r3, [r7, #28]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005632:	f001 feff 	bl	8007434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <xQueueGenericSend+0xd4>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d129      	bne.n	800569c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800564e:	f000 fa0b 	bl	8005a68 <prvCopyDataToQueue>
 8005652:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d010      	beq.n	800567e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	3324      	adds	r3, #36	; 0x24
 8005660:	4618      	mov	r0, r3
 8005662:	f000 ffcf 	bl	8006604 <xTaskRemoveFromEventList>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d013      	beq.n	8005694 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800566c:	4b3f      	ldr	r3, [pc, #252]	; (800576c <xQueueGenericSend+0x1f8>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	e00a      	b.n	8005694 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005684:	4b39      	ldr	r3, [pc, #228]	; (800576c <xQueueGenericSend+0x1f8>)
 8005686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005694:	f001 fefe 	bl	8007494 <vPortExitCritical>
				return pdPASS;
 8005698:	2301      	movs	r3, #1
 800569a:	e063      	b.n	8005764 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056a2:	f001 fef7 	bl	8007494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e05c      	b.n	8005764 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056b0:	f107 0314 	add.w	r3, r7, #20
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 f809 	bl	80066cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056ba:	2301      	movs	r3, #1
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056be:	f001 fee9 	bl	8007494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056c2:	f000 fd7b 	bl	80061bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c6:	f001 feb5 	bl	8007434 <vPortEnterCritical>
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056d0:	b25b      	sxtb	r3, r3
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d103      	bne.n	80056e0 <xQueueGenericSend+0x16c>
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e6:	b25b      	sxtb	r3, r3
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d103      	bne.n	80056f6 <xQueueGenericSend+0x182>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056f6:	f001 fecd 	bl	8007494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056fa:	1d3a      	adds	r2, r7, #4
 80056fc:	f107 0314 	add.w	r3, r7, #20
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fff8 	bl	80066f8 <xTaskCheckForTimeOut>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d124      	bne.n	8005758 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800570e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005710:	f000 faa2 	bl	8005c58 <prvIsQueueFull>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d018      	beq.n	800574c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	3310      	adds	r3, #16
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f000 ff1e 	bl	8006564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572a:	f000 fa2d 	bl	8005b88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800572e:	f000 fd53 	bl	80061d8 <xTaskResumeAll>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	f47f af7c 	bne.w	8005632 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800573a:	4b0c      	ldr	r3, [pc, #48]	; (800576c <xQueueGenericSend+0x1f8>)
 800573c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	e772      	b.n	8005632 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800574c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800574e:	f000 fa1b 	bl	8005b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005752:	f000 fd41 	bl	80061d8 <xTaskResumeAll>
 8005756:	e76c      	b.n	8005632 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800575a:	f000 fa15 	bl	8005b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800575e:	f000 fd3b 	bl	80061d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005762:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005764:	4618      	mov	r0, r3
 8005766:	3738      	adds	r7, #56	; 0x38
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	e000ed04 	.word	0xe000ed04

08005770 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b090      	sub	sp, #64	; 0x40
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <xQueueGenericSendFromISR+0x3c>
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <xQueueGenericSendFromISR+0x40>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <xQueueGenericSendFromISR+0x42>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d103      	bne.n	80057da <xQueueGenericSendFromISR+0x6a>
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <xQueueGenericSendFromISR+0x6e>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <xQueueGenericSendFromISR+0x70>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	623b      	str	r3, [r7, #32]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057fa:	f001 fefd 	bl	80075f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057fe:	f3ef 8211 	mrs	r2, BASEPRI
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	61fa      	str	r2, [r7, #28]
 8005814:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005816:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005818:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	429a      	cmp	r2, r3
 8005824:	d302      	bcc.n	800582c <xQueueGenericSendFromISR+0xbc>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d12f      	bne.n	800588c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005842:	f000 f911 	bl	8005a68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005846:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d112      	bne.n	8005876 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d016      	beq.n	8005886 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	3324      	adds	r3, #36	; 0x24
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fed1 	bl	8006604 <xTaskRemoveFromEventList>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00e      	beq.n	8005886 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e007      	b.n	8005886 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800587a:	3301      	adds	r3, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	b25a      	sxtb	r2, r3
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005886:	2301      	movs	r3, #1
 8005888:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800588a:	e001      	b.n	8005890 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800588c:	2300      	movs	r3, #0
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005892:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800589a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800589c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3740      	adds	r7, #64	; 0x40
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	; 0x30
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <xQueueReceive+0x30>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	623b      	str	r3, [r7, #32]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d103      	bne.n	80058e6 <xQueueReceive+0x3e>
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <xQueueReceive+0x42>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <xQueueReceive+0x44>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <xQueueReceive+0x5e>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	61fb      	str	r3, [r7, #28]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005906:	f001 f83b 	bl	8006980 <xTaskGetSchedulerState>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <xQueueReceive+0x6e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <xQueueReceive+0x72>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <xQueueReceive+0x74>
 800591a:	2300      	movs	r3, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <xQueueReceive+0x8e>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	61bb      	str	r3, [r7, #24]
}
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005936:	f001 fd7d 	bl	8007434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01f      	beq.n	8005986 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800594a:	f000 f8f7 	bl	8005b3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	1e5a      	subs	r2, r3, #1
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00f      	beq.n	800597e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	3310      	adds	r3, #16
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fe4e 	bl	8006604 <xTaskRemoveFromEventList>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800596e:	4b3d      	ldr	r3, [pc, #244]	; (8005a64 <xQueueReceive+0x1bc>)
 8005970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800597e:	f001 fd89 	bl	8007494 <vPortExitCritical>
				return pdPASS;
 8005982:	2301      	movs	r3, #1
 8005984:	e069      	b.n	8005a5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d103      	bne.n	8005994 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800598c:	f001 fd82 	bl	8007494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005990:	2300      	movs	r3, #0
 8005992:	e062      	b.n	8005a5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800599a:	f107 0310 	add.w	r3, r7, #16
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fe94 	bl	80066cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059a8:	f001 fd74 	bl	8007494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ac:	f000 fc06 	bl	80061bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059b0:	f001 fd40 	bl	8007434 <vPortEnterCritical>
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ba:	b25b      	sxtb	r3, r3
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d103      	bne.n	80059ca <xQueueReceive+0x122>
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059d0:	b25b      	sxtb	r3, r3
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d103      	bne.n	80059e0 <xQueueReceive+0x138>
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059e0:	f001 fd58 	bl	8007494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059e4:	1d3a      	adds	r2, r7, #4
 80059e6:	f107 0310 	add.w	r3, r7, #16
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fe83 	bl	80066f8 <xTaskCheckForTimeOut>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d123      	bne.n	8005a40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fa:	f000 f917 	bl	8005c2c <prvIsQueueEmpty>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d017      	beq.n	8005a34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	3324      	adds	r3, #36	; 0x24
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fda9 	bl	8006564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a14:	f000 f8b8 	bl	8005b88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a18:	f000 fbde 	bl	80061d8 <xTaskResumeAll>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d189      	bne.n	8005936 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a22:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <xQueueReceive+0x1bc>)
 8005a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	e780      	b.n	8005936 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a36:	f000 f8a7 	bl	8005b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a3a:	f000 fbcd 	bl	80061d8 <xTaskResumeAll>
 8005a3e:	e77a      	b.n	8005936 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a42:	f000 f8a1 	bl	8005b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a46:	f000 fbc7 	bl	80061d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a4c:	f000 f8ee 	bl	8005c2c <prvIsQueueEmpty>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f43f af6f 	beq.w	8005936 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3730      	adds	r7, #48	; 0x30
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10d      	bne.n	8005aa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d14d      	bne.n	8005b2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 ff92 	bl	80069bc <xTaskPriorityDisinherit>
 8005a98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	e043      	b.n	8005b2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d119      	bne.n	8005adc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6858      	ldr	r0, [r3, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	f001 ffee 	bl	8007a94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	441a      	add	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d32b      	bcc.n	8005b2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	e026      	b.n	8005b2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68d8      	ldr	r0, [r3, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	f001 ffd4 	bl	8007a94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	425b      	negs	r3, r3
 8005af6:	441a      	add	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d207      	bcs.n	8005b18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	425b      	negs	r3, r3
 8005b12:	441a      	add	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d105      	bne.n	8005b2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b32:	697b      	ldr	r3, [r7, #20]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d018      	beq.n	8005b80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	441a      	add	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d303      	bcc.n	8005b70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68d9      	ldr	r1, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6838      	ldr	r0, [r7, #0]
 8005b7c:	f001 ff8a 	bl	8007a94 <memcpy>
	}
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b90:	f001 fc50 	bl	8007434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b9c:	e011      	b.n	8005bc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d012      	beq.n	8005bcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3324      	adds	r3, #36	; 0x24
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fd2a 	bl	8006604 <xTaskRemoveFromEventList>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005bb6:	f000 fe01 	bl	80067bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	dce9      	bgt.n	8005b9e <prvUnlockQueue+0x16>
 8005bca:	e000      	b.n	8005bce <prvUnlockQueue+0x46>
					break;
 8005bcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	22ff      	movs	r2, #255	; 0xff
 8005bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bd6:	f001 fc5d 	bl	8007494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bda:	f001 fc2b 	bl	8007434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005be4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005be6:	e011      	b.n	8005c0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d012      	beq.n	8005c16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3310      	adds	r3, #16
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fd05 	bl	8006604 <xTaskRemoveFromEventList>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c00:	f000 fddc 	bl	80067bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c04:	7bbb      	ldrb	r3, [r7, #14]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	dce9      	bgt.n	8005be8 <prvUnlockQueue+0x60>
 8005c14:	e000      	b.n	8005c18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	22ff      	movs	r2, #255	; 0xff
 8005c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c20:	f001 fc38 	bl	8007494 <vPortExitCritical>
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c34:	f001 fbfe 	bl	8007434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d102      	bne.n	8005c46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e001      	b.n	8005c4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c4a:	f001 fc23 	bl	8007494 <vPortExitCritical>

	return xReturn;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c60:	f001 fbe8 	bl	8007434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d102      	bne.n	8005c76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c70:	2301      	movs	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e001      	b.n	8005c7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c7a:	f001 fc0b 	bl	8007494 <vPortExitCritical>

	return xReturn;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e014      	b.n	8005cc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c98:	4a0f      	ldr	r2, [pc, #60]	; (8005cd8 <vQueueAddToRegistry+0x50>)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ca4:	490c      	ldr	r1, [pc, #48]	; (8005cd8 <vQueueAddToRegistry+0x50>)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cae:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <vQueueAddToRegistry+0x50>)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	4413      	add	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cba:	e006      	b.n	8005cca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b07      	cmp	r3, #7
 8005cc6:	d9e7      	bls.n	8005c98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20004a10 	.word	0x20004a10

08005cdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cec:	f001 fba2 	bl	8007434 <vPortEnterCritical>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cf6:	b25b      	sxtb	r3, r3
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d103      	bne.n	8005d06 <vQueueWaitForMessageRestricted+0x2a>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d103      	bne.n	8005d1c <vQueueWaitForMessageRestricted+0x40>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d1c:	f001 fbba 	bl	8007494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	3324      	adds	r3, #36	; 0x24
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fc3b 	bl	80065ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d36:	6978      	ldr	r0, [r7, #20]
 8005d38:	f7ff ff26 	bl	8005b88 <prvUnlockQueue>
	}
 8005d3c:	bf00      	nop
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08e      	sub	sp, #56	; 0x38
 8005d48:	af04      	add	r7, sp, #16
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	623b      	str	r3, [r7, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <xTaskCreateStatic+0x46>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	61fb      	str	r3, [r7, #28]
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d8a:	235c      	movs	r3, #92	; 0x5c
 8005d8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b5c      	cmp	r3, #92	; 0x5c
 8005d92:	d00a      	beq.n	8005daa <xTaskCreateStatic+0x66>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	61bb      	str	r3, [r7, #24]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005daa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01e      	beq.n	8005df0 <xTaskCreateStatic+0xac>
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01b      	beq.n	8005df0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dca:	2300      	movs	r3, #0
 8005dcc:	9303      	str	r3, [sp, #12]
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	9302      	str	r3, [sp, #8]
 8005dd2:	f107 0314 	add.w	r3, r7, #20
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f850 	bl	8005e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dea:	f000 f8dd 	bl	8005fa8 <prvAddNewTaskToReadyList>
 8005dee:	e001      	b.n	8005df4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005df4:	697b      	ldr	r3, [r7, #20]
	}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3728      	adds	r7, #40	; 0x28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b08c      	sub	sp, #48	; 0x30
 8005e02:	af04      	add	r7, sp, #16
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 fc30 	bl	8007678 <pvPortMalloc>
 8005e18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00e      	beq.n	8005e3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e20:	205c      	movs	r0, #92	; 0x5c
 8005e22:	f001 fc29 	bl	8007678 <pvPortMalloc>
 8005e26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
 8005e34:	e005      	b.n	8005e42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e36:	6978      	ldr	r0, [r7, #20]
 8005e38:	f001 fcea 	bl	8007810 <vPortFree>
 8005e3c:	e001      	b.n	8005e42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d017      	beq.n	8005e78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e50:	88fa      	ldrh	r2, [r7, #6]
 8005e52:	2300      	movs	r3, #0
 8005e54:	9303      	str	r3, [sp, #12]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	9302      	str	r3, [sp, #8]
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f80e 	bl	8005e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e6c:	69f8      	ldr	r0, [r7, #28]
 8005e6e:	f000 f89b 	bl	8005fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e72:	2301      	movs	r3, #1
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	e002      	b.n	8005e7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e7e:	69bb      	ldr	r3, [r7, #24]
	}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	21a5      	movs	r1, #165	; 0xa5
 8005ea2:	f001 fe05 	bl	8007ab0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	617b      	str	r3, [r7, #20]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01f      	beq.n	8005f26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	e012      	b.n	8005f12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	7819      	ldrb	r1, [r3, #0]
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	3334      	adds	r3, #52	; 0x34
 8005efc:	460a      	mov	r2, r1
 8005efe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d006      	beq.n	8005f1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	2b0f      	cmp	r3, #15
 8005f16:	d9e9      	bls.n	8005eec <prvInitialiseNewTask+0x64>
 8005f18:	e000      	b.n	8005f1c <prvInitialiseNewTask+0x94>
			{
				break;
 8005f1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f24:	e003      	b.n	8005f2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	2b37      	cmp	r3, #55	; 0x37
 8005f32:	d901      	bls.n	8005f38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f34:	2337      	movs	r3, #55	; 0x37
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	2200      	movs	r2, #0
 8005f48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff f978 	bl	8005244 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	3318      	adds	r3, #24
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff f973 	bl	8005244 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	2200      	movs	r2, #0
 8005f78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	69b8      	ldr	r0, [r7, #24]
 8005f88:	f001 f928 	bl	80071dc <pxPortInitialiseStack>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f9e:	bf00      	nop
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fb0:	f001 fa40 	bl	8007434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fb4:	4b2d      	ldr	r3, [pc, #180]	; (800606c <prvAddNewTaskToReadyList+0xc4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	4a2c      	ldr	r2, [pc, #176]	; (800606c <prvAddNewTaskToReadyList+0xc4>)
 8005fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fbe:	4b2c      	ldr	r3, [pc, #176]	; (8006070 <prvAddNewTaskToReadyList+0xc8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fc6:	4a2a      	ldr	r2, [pc, #168]	; (8006070 <prvAddNewTaskToReadyList+0xc8>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fcc:	4b27      	ldr	r3, [pc, #156]	; (800606c <prvAddNewTaskToReadyList+0xc4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d110      	bne.n	8005ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fd4:	f000 fc16 	bl	8006804 <prvInitialiseTaskLists>
 8005fd8:	e00d      	b.n	8005ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fda:	4b26      	ldr	r3, [pc, #152]	; (8006074 <prvAddNewTaskToReadyList+0xcc>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fe2:	4b23      	ldr	r3, [pc, #140]	; (8006070 <prvAddNewTaskToReadyList+0xc8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d802      	bhi.n	8005ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <prvAddNewTaskToReadyList+0xc8>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ff6:	4b20      	ldr	r3, [pc, #128]	; (8006078 <prvAddNewTaskToReadyList+0xd0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <prvAddNewTaskToReadyList+0xd0>)
 8005ffe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006000:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <prvAddNewTaskToReadyList+0xd0>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	4b1b      	ldr	r3, [pc, #108]	; (800607c <prvAddNewTaskToReadyList+0xd4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d903      	bls.n	800601c <prvAddNewTaskToReadyList+0x74>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	4a18      	ldr	r2, [pc, #96]	; (800607c <prvAddNewTaskToReadyList+0xd4>)
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4a15      	ldr	r2, [pc, #84]	; (8006080 <prvAddNewTaskToReadyList+0xd8>)
 800602a:	441a      	add	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f7ff f913 	bl	800525e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006038:	f001 fa2c 	bl	8007494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800603c:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <prvAddNewTaskToReadyList+0xcc>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00e      	beq.n	8006062 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006044:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <prvAddNewTaskToReadyList+0xc8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	429a      	cmp	r2, r3
 8006050:	d207      	bcs.n	8006062 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006052:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <prvAddNewTaskToReadyList+0xdc>)
 8006054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000bbc 	.word	0x20000bbc
 8006070:	200006e8 	.word	0x200006e8
 8006074:	20000bc8 	.word	0x20000bc8
 8006078:	20000bd8 	.word	0x20000bd8
 800607c:	20000bc4 	.word	0x20000bc4
 8006080:	200006ec 	.word	0x200006ec
 8006084:	e000ed04 	.word	0xe000ed04

08006088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d017      	beq.n	80060ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800609a:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <vTaskDelay+0x60>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <vTaskDelay+0x30>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	60bb      	str	r3, [r7, #8]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060b8:	f000 f880 	bl	80061bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060bc:	2100      	movs	r1, #0
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fcea 	bl	8006a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060c4:	f000 f888 	bl	80061d8 <xTaskResumeAll>
 80060c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d107      	bne.n	80060e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <vTaskDelay+0x64>)
 80060d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20000be4 	.word	0x20000be4
 80060ec:	e000ed04 	.word	0xe000ed04

080060f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060fe:	463a      	mov	r2, r7
 8006100:	1d39      	adds	r1, r7, #4
 8006102:	f107 0308 	add.w	r3, r7, #8
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff f848 	bl	800519c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	9202      	str	r2, [sp, #8]
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	2300      	movs	r3, #0
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	460a      	mov	r2, r1
 800611e:	4921      	ldr	r1, [pc, #132]	; (80061a4 <vTaskStartScheduler+0xb4>)
 8006120:	4821      	ldr	r0, [pc, #132]	; (80061a8 <vTaskStartScheduler+0xb8>)
 8006122:	f7ff fe0f 	bl	8005d44 <xTaskCreateStatic>
 8006126:	4603      	mov	r3, r0
 8006128:	4a20      	ldr	r2, [pc, #128]	; (80061ac <vTaskStartScheduler+0xbc>)
 800612a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800612c:	4b1f      	ldr	r3, [pc, #124]	; (80061ac <vTaskStartScheduler+0xbc>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	e001      	b.n	800613e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d102      	bne.n	800614a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006144:	f000 fcfc 	bl	8006b40 <xTimerCreateTimerTask>
 8006148:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d116      	bne.n	800617e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	613b      	str	r3, [r7, #16]
}
 8006162:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006164:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <vTaskStartScheduler+0xc0>)
 8006166:	f04f 32ff 	mov.w	r2, #4294967295
 800616a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800616c:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <vTaskStartScheduler+0xc4>)
 800616e:	2201      	movs	r2, #1
 8006170:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006172:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <vTaskStartScheduler+0xc8>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006178:	f001 f8ba 	bl	80072f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800617c:	e00e      	b.n	800619c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006184:	d10a      	bne.n	800619c <vTaskStartScheduler+0xac>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	60fb      	str	r3, [r7, #12]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <vTaskStartScheduler+0xaa>
}
 800619c:	bf00      	nop
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	08007ae8 	.word	0x08007ae8
 80061a8:	080067d5 	.word	0x080067d5
 80061ac:	20000be0 	.word	0x20000be0
 80061b0:	20000bdc 	.word	0x20000bdc
 80061b4:	20000bc8 	.word	0x20000bc8
 80061b8:	20000bc0 	.word	0x20000bc0

080061bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <vTaskSuspendAll+0x18>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	4a03      	ldr	r2, [pc, #12]	; (80061d4 <vTaskSuspendAll+0x18>)
 80061c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061ca:	bf00      	nop
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	20000be4 	.word	0x20000be4

080061d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061e6:	4b42      	ldr	r3, [pc, #264]	; (80062f0 <xTaskResumeAll+0x118>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <xTaskResumeAll+0x2c>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	603b      	str	r3, [r7, #0]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006204:	f001 f916 	bl	8007434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006208:	4b39      	ldr	r3, [pc, #228]	; (80062f0 <xTaskResumeAll+0x118>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3b01      	subs	r3, #1
 800620e:	4a38      	ldr	r2, [pc, #224]	; (80062f0 <xTaskResumeAll+0x118>)
 8006210:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006212:	4b37      	ldr	r3, [pc, #220]	; (80062f0 <xTaskResumeAll+0x118>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d162      	bne.n	80062e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800621a:	4b36      	ldr	r3, [pc, #216]	; (80062f4 <xTaskResumeAll+0x11c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d05e      	beq.n	80062e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006222:	e02f      	b.n	8006284 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006224:	4b34      	ldr	r3, [pc, #208]	; (80062f8 <xTaskResumeAll+0x120>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3318      	adds	r3, #24
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff f871 	bl	8005318 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3304      	adds	r3, #4
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff f86c 	bl	8005318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	4b2d      	ldr	r3, [pc, #180]	; (80062fc <xTaskResumeAll+0x124>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d903      	bls.n	8006254 <xTaskResumeAll+0x7c>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <xTaskResumeAll+0x124>)
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4a27      	ldr	r2, [pc, #156]	; (8006300 <xTaskResumeAll+0x128>)
 8006262:	441a      	add	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3304      	adds	r3, #4
 8006268:	4619      	mov	r1, r3
 800626a:	4610      	mov	r0, r2
 800626c:	f7fe fff7 	bl	800525e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	4b23      	ldr	r3, [pc, #140]	; (8006304 <xTaskResumeAll+0x12c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800627e:	4b22      	ldr	r3, [pc, #136]	; (8006308 <xTaskResumeAll+0x130>)
 8006280:	2201      	movs	r2, #1
 8006282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006284:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <xTaskResumeAll+0x120>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1cb      	bne.n	8006224 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006292:	f000 fb55 	bl	8006940 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006296:	4b1d      	ldr	r3, [pc, #116]	; (800630c <xTaskResumeAll+0x134>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d010      	beq.n	80062c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062a2:	f000 f847 	bl	8006334 <xTaskIncrementTick>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062ac:	4b16      	ldr	r3, [pc, #88]	; (8006308 <xTaskResumeAll+0x130>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f1      	bne.n	80062a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <xTaskResumeAll+0x134>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062c4:	4b10      	ldr	r3, [pc, #64]	; (8006308 <xTaskResumeAll+0x130>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d009      	beq.n	80062e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062cc:	2301      	movs	r3, #1
 80062ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <xTaskResumeAll+0x138>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e0:	f001 f8d8 	bl	8007494 <vPortExitCritical>

	return xAlreadyYielded;
 80062e4:	68bb      	ldr	r3, [r7, #8]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000be4 	.word	0x20000be4
 80062f4:	20000bbc 	.word	0x20000bbc
 80062f8:	20000b7c 	.word	0x20000b7c
 80062fc:	20000bc4 	.word	0x20000bc4
 8006300:	200006ec 	.word	0x200006ec
 8006304:	200006e8 	.word	0x200006e8
 8006308:	20000bd0 	.word	0x20000bd0
 800630c:	20000bcc 	.word	0x20000bcc
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800631a:	4b05      	ldr	r3, [pc, #20]	; (8006330 <xTaskGetTickCount+0x1c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006320:	687b      	ldr	r3, [r7, #4]
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000bc0 	.word	0x20000bc0

08006334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633e:	4b4f      	ldr	r3, [pc, #316]	; (800647c <xTaskIncrementTick+0x148>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f040 808f 	bne.w	8006466 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006348:	4b4d      	ldr	r3, [pc, #308]	; (8006480 <xTaskIncrementTick+0x14c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006350:	4a4b      	ldr	r2, [pc, #300]	; (8006480 <xTaskIncrementTick+0x14c>)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d120      	bne.n	800639e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800635c:	4b49      	ldr	r3, [pc, #292]	; (8006484 <xTaskIncrementTick+0x150>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <xTaskIncrementTick+0x48>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	603b      	str	r3, [r7, #0]
}
 8006378:	bf00      	nop
 800637a:	e7fe      	b.n	800637a <xTaskIncrementTick+0x46>
 800637c:	4b41      	ldr	r3, [pc, #260]	; (8006484 <xTaskIncrementTick+0x150>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	4b41      	ldr	r3, [pc, #260]	; (8006488 <xTaskIncrementTick+0x154>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a3f      	ldr	r2, [pc, #252]	; (8006484 <xTaskIncrementTick+0x150>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	4a3f      	ldr	r2, [pc, #252]	; (8006488 <xTaskIncrementTick+0x154>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	4b3e      	ldr	r3, [pc, #248]	; (800648c <xTaskIncrementTick+0x158>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	4a3d      	ldr	r2, [pc, #244]	; (800648c <xTaskIncrementTick+0x158>)
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	f000 fad1 	bl	8006940 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800639e:	4b3c      	ldr	r3, [pc, #240]	; (8006490 <xTaskIncrementTick+0x15c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d349      	bcc.n	800643c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063a8:	4b36      	ldr	r3, [pc, #216]	; (8006484 <xTaskIncrementTick+0x150>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d104      	bne.n	80063bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b2:	4b37      	ldr	r3, [pc, #220]	; (8006490 <xTaskIncrementTick+0x15c>)
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	601a      	str	r2, [r3, #0]
					break;
 80063ba:	e03f      	b.n	800643c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063bc:	4b31      	ldr	r3, [pc, #196]	; (8006484 <xTaskIncrementTick+0x150>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d203      	bcs.n	80063dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063d4:	4a2e      	ldr	r2, [pc, #184]	; (8006490 <xTaskIncrementTick+0x15c>)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063da:	e02f      	b.n	800643c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	3304      	adds	r3, #4
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe ff99 	bl	8005318 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	3318      	adds	r3, #24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe ff90 	bl	8005318 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	4b25      	ldr	r3, [pc, #148]	; (8006494 <xTaskIncrementTick+0x160>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d903      	bls.n	800640c <xTaskIncrementTick+0xd8>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a22      	ldr	r2, [pc, #136]	; (8006494 <xTaskIncrementTick+0x160>)
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <xTaskIncrementTick+0x164>)
 800641a:	441a      	add	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	3304      	adds	r3, #4
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f7fe ff1b 	bl	800525e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <xTaskIncrementTick+0x168>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	429a      	cmp	r2, r3
 8006434:	d3b8      	bcc.n	80063a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006436:	2301      	movs	r3, #1
 8006438:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800643a:	e7b5      	b.n	80063a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800643c:	4b17      	ldr	r3, [pc, #92]	; (800649c <xTaskIncrementTick+0x168>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006442:	4915      	ldr	r1, [pc, #84]	; (8006498 <xTaskIncrementTick+0x164>)
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d901      	bls.n	8006458 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006454:	2301      	movs	r3, #1
 8006456:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006458:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <xTaskIncrementTick+0x16c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d007      	beq.n	8006470 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006460:	2301      	movs	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e004      	b.n	8006470 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006466:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <xTaskIncrementTick+0x170>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	4a0d      	ldr	r2, [pc, #52]	; (80064a4 <xTaskIncrementTick+0x170>)
 800646e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006470:	697b      	ldr	r3, [r7, #20]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000be4 	.word	0x20000be4
 8006480:	20000bc0 	.word	0x20000bc0
 8006484:	20000b74 	.word	0x20000b74
 8006488:	20000b78 	.word	0x20000b78
 800648c:	20000bd4 	.word	0x20000bd4
 8006490:	20000bdc 	.word	0x20000bdc
 8006494:	20000bc4 	.word	0x20000bc4
 8006498:	200006ec 	.word	0x200006ec
 800649c:	200006e8 	.word	0x200006e8
 80064a0:	20000bd0 	.word	0x20000bd0
 80064a4:	20000bcc 	.word	0x20000bcc

080064a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064ae:	4b28      	ldr	r3, [pc, #160]	; (8006550 <vTaskSwitchContext+0xa8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064b6:	4b27      	ldr	r3, [pc, #156]	; (8006554 <vTaskSwitchContext+0xac>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064bc:	e041      	b.n	8006542 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80064be:	4b25      	ldr	r3, [pc, #148]	; (8006554 <vTaskSwitchContext+0xac>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c4:	4b24      	ldr	r3, [pc, #144]	; (8006558 <vTaskSwitchContext+0xb0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	e010      	b.n	80064ee <vTaskSwitchContext+0x46>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	607b      	str	r3, [r7, #4]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <vTaskSwitchContext+0x3e>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	491b      	ldr	r1, [pc, #108]	; (800655c <vTaskSwitchContext+0xb4>)
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0e4      	beq.n	80064cc <vTaskSwitchContext+0x24>
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4a13      	ldr	r2, [pc, #76]	; (800655c <vTaskSwitchContext+0xb4>)
 800650e:	4413      	add	r3, r2
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	605a      	str	r2, [r3, #4]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	3308      	adds	r3, #8
 8006524:	429a      	cmp	r2, r3
 8006526:	d104      	bne.n	8006532 <vTaskSwitchContext+0x8a>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4a09      	ldr	r2, [pc, #36]	; (8006560 <vTaskSwitchContext+0xb8>)
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	4a06      	ldr	r2, [pc, #24]	; (8006558 <vTaskSwitchContext+0xb0>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6013      	str	r3, [r2, #0]
}
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20000be4 	.word	0x20000be4
 8006554:	20000bd0 	.word	0x20000bd0
 8006558:	20000bc4 	.word	0x20000bc4
 800655c:	200006ec 	.word	0x200006ec
 8006560:	200006e8 	.word	0x200006e8

08006564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800658a:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <vTaskPlaceOnEventList+0x44>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3318      	adds	r3, #24
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fe fe87 	bl	80052a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006598:	2101      	movs	r1, #1
 800659a:	6838      	ldr	r0, [r7, #0]
 800659c:	f000 fa7c 	bl	8006a98 <prvAddCurrentTaskToDelayedList>
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	200006e8 	.word	0x200006e8

080065ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	617b      	str	r3, [r7, #20]
}
 80065d0:	bf00      	nop
 80065d2:	e7fe      	b.n	80065d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065d4:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <vTaskPlaceOnEventListRestricted+0x54>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3318      	adds	r3, #24
 80065da:	4619      	mov	r1, r3
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7fe fe3e 	bl	800525e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80065e8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	68b8      	ldr	r0, [r7, #8]
 80065f2:	f000 fa51 	bl	8006a98 <prvAddCurrentTaskToDelayedList>
	}
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	200006e8 	.word	0x200006e8

08006604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60fb      	str	r3, [r7, #12]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	3318      	adds	r3, #24
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe fe6f 	bl	8005318 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800663a:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <xTaskRemoveFromEventList+0xb0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11d      	bne.n	800667e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fe66 	bl	8005318 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <xTaskRemoveFromEventList+0xb4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d903      	bls.n	8006660 <xTaskRemoveFromEventList+0x5c>
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <xTaskRemoveFromEventList+0xb4>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4a13      	ldr	r2, [pc, #76]	; (80066bc <xTaskRemoveFromEventList+0xb8>)
 800666e:	441a      	add	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7fe fdf1 	bl	800525e <vListInsertEnd>
 800667c:	e005      	b.n	800668a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3318      	adds	r3, #24
 8006682:	4619      	mov	r1, r3
 8006684:	480e      	ldr	r0, [pc, #56]	; (80066c0 <xTaskRemoveFromEventList+0xbc>)
 8006686:	f7fe fdea 	bl	800525e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <xTaskRemoveFromEventList+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	429a      	cmp	r2, r3
 8006696:	d905      	bls.n	80066a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800669c:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <xTaskRemoveFromEventList+0xc4>)
 800669e:	2201      	movs	r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e001      	b.n	80066a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066a8:	697b      	ldr	r3, [r7, #20]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000be4 	.word	0x20000be4
 80066b8:	20000bc4 	.word	0x20000bc4
 80066bc:	200006ec 	.word	0x200006ec
 80066c0:	20000b7c 	.word	0x20000b7c
 80066c4:	200006e8 	.word	0x200006e8
 80066c8:	20000bd0 	.word	0x20000bd0

080066cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <vTaskInternalSetTimeOutState+0x24>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <vTaskInternalSetTimeOutState+0x28>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	605a      	str	r2, [r3, #4]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20000bd4 	.word	0x20000bd4
 80066f4:	20000bc0 	.word	0x20000bc0

080066f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	613b      	str	r3, [r7, #16]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	60fb      	str	r3, [r7, #12]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800673a:	f000 fe7b 	bl	8007434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800673e:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <xTaskCheckForTimeOut+0xbc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006756:	d102      	bne.n	800675e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006758:	2300      	movs	r3, #0
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	e023      	b.n	80067a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <xTaskCheckForTimeOut+0xc0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d007      	beq.n	800677a <xTaskCheckForTimeOut+0x82>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	429a      	cmp	r2, r3
 8006772:	d302      	bcc.n	800677a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e015      	b.n	80067a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	429a      	cmp	r2, r3
 8006782:	d20b      	bcs.n	800679c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	1ad2      	subs	r2, r2, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ff9b 	bl	80066cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	e004      	b.n	80067a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067a2:	2301      	movs	r3, #1
 80067a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067a6:	f000 fe75 	bl	8007494 <vPortExitCritical>

	return xReturn;
 80067aa:	69fb      	ldr	r3, [r7, #28]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000bc0 	.word	0x20000bc0
 80067b8:	20000bd4 	.word	0x20000bd4

080067bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067c0:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <vTaskMissedYield+0x14>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	bf00      	nop
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	20000bd0 	.word	0x20000bd0

080067d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067dc:	f000 f852 	bl	8006884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <prvIdleTask+0x28>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d9f9      	bls.n	80067dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <prvIdleTask+0x2c>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067f8:	e7f0      	b.n	80067dc <prvIdleTask+0x8>
 80067fa:	bf00      	nop
 80067fc:	200006ec 	.word	0x200006ec
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
 800680e:	e00c      	b.n	800682a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4a12      	ldr	r2, [pc, #72]	; (8006864 <prvInitialiseTaskLists+0x60>)
 800681c:	4413      	add	r3, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fcf0 	bl	8005204 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3301      	adds	r3, #1
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b37      	cmp	r3, #55	; 0x37
 800682e:	d9ef      	bls.n	8006810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006830:	480d      	ldr	r0, [pc, #52]	; (8006868 <prvInitialiseTaskLists+0x64>)
 8006832:	f7fe fce7 	bl	8005204 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006836:	480d      	ldr	r0, [pc, #52]	; (800686c <prvInitialiseTaskLists+0x68>)
 8006838:	f7fe fce4 	bl	8005204 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800683c:	480c      	ldr	r0, [pc, #48]	; (8006870 <prvInitialiseTaskLists+0x6c>)
 800683e:	f7fe fce1 	bl	8005204 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006842:	480c      	ldr	r0, [pc, #48]	; (8006874 <prvInitialiseTaskLists+0x70>)
 8006844:	f7fe fcde 	bl	8005204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006848:	480b      	ldr	r0, [pc, #44]	; (8006878 <prvInitialiseTaskLists+0x74>)
 800684a:	f7fe fcdb 	bl	8005204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <prvInitialiseTaskLists+0x78>)
 8006850:	4a05      	ldr	r2, [pc, #20]	; (8006868 <prvInitialiseTaskLists+0x64>)
 8006852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006854:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <prvInitialiseTaskLists+0x7c>)
 8006856:	4a05      	ldr	r2, [pc, #20]	; (800686c <prvInitialiseTaskLists+0x68>)
 8006858:	601a      	str	r2, [r3, #0]
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	200006ec 	.word	0x200006ec
 8006868:	20000b4c 	.word	0x20000b4c
 800686c:	20000b60 	.word	0x20000b60
 8006870:	20000b7c 	.word	0x20000b7c
 8006874:	20000b90 	.word	0x20000b90
 8006878:	20000ba8 	.word	0x20000ba8
 800687c:	20000b74 	.word	0x20000b74
 8006880:	20000b78 	.word	0x20000b78

08006884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800688a:	e019      	b.n	80068c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800688c:	f000 fdd2 	bl	8007434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <prvCheckTasksWaitingTermination+0x50>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe fd3b 	bl	8005318 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <prvCheckTasksWaitingTermination+0x54>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4a0b      	ldr	r2, [pc, #44]	; (80068d8 <prvCheckTasksWaitingTermination+0x54>)
 80068aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068b6:	f000 fded 	bl	8007494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f810 	bl	80068e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e1      	bne.n	800688c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000b90 	.word	0x20000b90
 80068d8:	20000bbc 	.word	0x20000bbc
 80068dc:	20000ba4 	.word	0x20000ba4

080068e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d108      	bne.n	8006904 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 ff8a 	bl	8007810 <vPortFree>
				vPortFree( pxTCB );
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 ff87 	bl	8007810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006902:	e018      	b.n	8006936 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800690a:	2b01      	cmp	r3, #1
 800690c:	d103      	bne.n	8006916 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 ff7e 	bl	8007810 <vPortFree>
	}
 8006914:	e00f      	b.n	8006936 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800691c:	2b02      	cmp	r3, #2
 800691e:	d00a      	beq.n	8006936 <prvDeleteTCB+0x56>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <prvDeleteTCB+0x54>
	}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006946:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <prvResetNextTaskUnblockTime+0x38>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <prvResetNextTaskUnblockTime+0x3c>)
 8006952:	f04f 32ff 	mov.w	r2, #4294967295
 8006956:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006958:	e008      	b.n	800696c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800695a:	4b07      	ldr	r3, [pc, #28]	; (8006978 <prvResetNextTaskUnblockTime+0x38>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4a04      	ldr	r2, [pc, #16]	; (800697c <prvResetNextTaskUnblockTime+0x3c>)
 800696a:	6013      	str	r3, [r2, #0]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	20000b74 	.word	0x20000b74
 800697c:	20000bdc 	.word	0x20000bdc

08006980 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <xTaskGetSchedulerState+0x34>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800698e:	2301      	movs	r3, #1
 8006990:	607b      	str	r3, [r7, #4]
 8006992:	e008      	b.n	80069a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006994:	4b08      	ldr	r3, [pc, #32]	; (80069b8 <xTaskGetSchedulerState+0x38>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d102      	bne.n	80069a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800699c:	2302      	movs	r3, #2
 800699e:	607b      	str	r3, [r7, #4]
 80069a0:	e001      	b.n	80069a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069a2:	2300      	movs	r3, #0
 80069a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069a6:	687b      	ldr	r3, [r7, #4]
	}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20000bc8 	.word	0x20000bc8
 80069b8:	20000be4 	.word	0x20000be4

080069bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d056      	beq.n	8006a80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069d2:	4b2e      	ldr	r3, [pc, #184]	; (8006a8c <xTaskPriorityDisinherit+0xd0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d00a      	beq.n	80069f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60fb      	str	r3, [r7, #12]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60bb      	str	r3, [r7, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a14:	1e5a      	subs	r2, r3, #1
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d02c      	beq.n	8006a80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d128      	bne.n	8006a80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	3304      	adds	r3, #4
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fe fc70 	bl	8005318 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a50:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <xTaskPriorityDisinherit+0xd4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d903      	bls.n	8006a60 <xTaskPriorityDisinherit+0xa4>
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <xTaskPriorityDisinherit+0xd4>)
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <xTaskPriorityDisinherit+0xd8>)
 8006a6e:	441a      	add	r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	3304      	adds	r3, #4
 8006a74:	4619      	mov	r1, r3
 8006a76:	4610      	mov	r0, r2
 8006a78:	f7fe fbf1 	bl	800525e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a80:	697b      	ldr	r3, [r7, #20]
	}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	200006e8 	.word	0x200006e8
 8006a90:	20000bc4 	.word	0x20000bc4
 8006a94:	200006ec 	.word	0x200006ec

08006a98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aa2:	4b21      	ldr	r3, [pc, #132]	; (8006b28 <prvAddCurrentTaskToDelayedList+0x90>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa8:	4b20      	ldr	r3, [pc, #128]	; (8006b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3304      	adds	r3, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe fc32 	bl	8005318 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d10a      	bne.n	8006ad2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ac2:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4819      	ldr	r0, [pc, #100]	; (8006b30 <prvAddCurrentTaskToDelayedList+0x98>)
 8006acc:	f7fe fbc7 	bl	800525e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ad0:	e026      	b.n	8006b20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ada:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d209      	bcs.n	8006afe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aea:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fe fbd5 	bl	80052a6 <vListInsert>
}
 8006afc:	e010      	b.n	8006b20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006afe:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3304      	adds	r3, #4
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	f7fe fbcb 	bl	80052a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b10:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d202      	bcs.n	8006b20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b1a:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6013      	str	r3, [r2, #0]
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20000bc0 	.word	0x20000bc0
 8006b2c:	200006e8 	.word	0x200006e8
 8006b30:	20000ba8 	.word	0x20000ba8
 8006b34:	20000b78 	.word	0x20000b78
 8006b38:	20000b74 	.word	0x20000b74
 8006b3c:	20000bdc 	.word	0x20000bdc

08006b40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08a      	sub	sp, #40	; 0x28
 8006b44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b4a:	f000 fb07 	bl	800715c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b4e:	4b1c      	ldr	r3, [pc, #112]	; (8006bc0 <xTimerCreateTimerTask+0x80>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d021      	beq.n	8006b9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b5e:	1d3a      	adds	r2, r7, #4
 8006b60:	f107 0108 	add.w	r1, r7, #8
 8006b64:	f107 030c 	add.w	r3, r7, #12
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fe fb31 	bl	80051d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	9202      	str	r2, [sp, #8]
 8006b76:	9301      	str	r3, [sp, #4]
 8006b78:	2302      	movs	r3, #2
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	460a      	mov	r2, r1
 8006b80:	4910      	ldr	r1, [pc, #64]	; (8006bc4 <xTimerCreateTimerTask+0x84>)
 8006b82:	4811      	ldr	r0, [pc, #68]	; (8006bc8 <xTimerCreateTimerTask+0x88>)
 8006b84:	f7ff f8de 	bl	8005d44 <xTaskCreateStatic>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <xTimerCreateTimerTask+0x8c>)
 8006b8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <xTimerCreateTimerTask+0x8c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b96:	2301      	movs	r3, #1
 8006b98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	613b      	str	r3, [r7, #16]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bb6:	697b      	ldr	r3, [r7, #20]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20000c18 	.word	0x20000c18
 8006bc4:	08007af0 	.word	0x08007af0
 8006bc8:	08006d05 	.word	0x08006d05
 8006bcc:	20000c1c 	.word	0x20000c1c

08006bd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08a      	sub	sp, #40	; 0x28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	623b      	str	r3, [r7, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	e7fe      	b.n	8006bfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bfe:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <xTimerGenericCommand+0x98>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d02a      	beq.n	8006c5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b05      	cmp	r3, #5
 8006c16:	dc18      	bgt.n	8006c4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c18:	f7ff feb2 	bl	8006980 <xTaskGetSchedulerState>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d109      	bne.n	8006c36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c22:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <xTimerGenericCommand+0x98>)
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	f107 0110 	add.w	r1, r7, #16
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2e:	f7fe fca1 	bl	8005574 <xQueueGenericSend>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24
 8006c34:	e012      	b.n	8006c5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <xTimerGenericCommand+0x98>)
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	f107 0110 	add.w	r1, r7, #16
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2200      	movs	r2, #0
 8006c42:	f7fe fc97 	bl	8005574 <xQueueGenericSend>
 8006c46:	6278      	str	r0, [r7, #36]	; 0x24
 8006c48:	e008      	b.n	8006c5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c4a:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <xTimerGenericCommand+0x98>)
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f107 0110 	add.w	r1, r7, #16
 8006c52:	2300      	movs	r3, #0
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	f7fe fd8b 	bl	8005770 <xQueueGenericSendFromISR>
 8006c5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3728      	adds	r7, #40	; 0x28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000c18 	.word	0x20000c18

08006c6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c76:	4b22      	ldr	r3, [pc, #136]	; (8006d00 <prvProcessExpiredTimer+0x94>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe fb47 	bl	8005318 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d022      	beq.n	8006cde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	699a      	ldr	r2, [r3, #24]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	18d1      	adds	r1, r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	6978      	ldr	r0, [r7, #20]
 8006ca6:	f000 f8d1 	bl	8006e4c <prvInsertTimerInActiveList>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01f      	beq.n	8006cf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	6978      	ldr	r0, [r7, #20]
 8006cbc:	f7ff ff88 	bl	8006bd0 <xTimerGenericCommand>
 8006cc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d113      	bne.n	8006cf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	60fb      	str	r3, [r7, #12]
}
 8006cda:	bf00      	nop
 8006cdc:	e7fe      	b.n	8006cdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	6978      	ldr	r0, [r7, #20]
 8006cf6:	4798      	blx	r3
}
 8006cf8:	bf00      	nop
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20000c10 	.word	0x20000c10

08006d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d0c:	f107 0308 	add.w	r3, r7, #8
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 f857 	bl	8006dc4 <prvGetNextExpireTime>
 8006d16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f803 	bl	8006d28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d22:	f000 f8d5 	bl	8006ed0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d26:	e7f1      	b.n	8006d0c <prvTimerTask+0x8>

08006d28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d32:	f7ff fa43 	bl	80061bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d36:	f107 0308 	add.w	r3, r7, #8
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f866 	bl	8006e0c <prvSampleTimeNow>
 8006d40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d130      	bne.n	8006daa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <prvProcessTimerOrBlockTask+0x3c>
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d806      	bhi.n	8006d64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d56:	f7ff fa3f 	bl	80061d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff ff85 	bl	8006c6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d62:	e024      	b.n	8006dae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d008      	beq.n	8006d7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d6a:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <prvProcessTimerOrBlockTask+0x90>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <prvProcessTimerOrBlockTask+0x50>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <prvProcessTimerOrBlockTask+0x52>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d7c:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <prvProcessTimerOrBlockTask+0x94>)
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	f7fe ffa7 	bl	8005cdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d8e:	f7ff fa23 	bl	80061d8 <xTaskResumeAll>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d98:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <prvProcessTimerOrBlockTask+0x98>)
 8006d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	f3bf 8f6f 	isb	sy
}
 8006da8:	e001      	b.n	8006dae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006daa:	f7ff fa15 	bl	80061d8 <xTaskResumeAll>
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000c14 	.word	0x20000c14
 8006dbc:	20000c18 	.word	0x20000c18
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <prvGetNextExpireTime+0x44>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <prvGetNextExpireTime+0x16>
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	e000      	b.n	8006ddc <prvGetNextExpireTime+0x18>
 8006dda:	2200      	movs	r2, #0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d105      	bne.n	8006df4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006de8:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <prvGetNextExpireTime+0x44>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	e001      	b.n	8006df8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006df8:	68fb      	ldr	r3, [r7, #12]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	20000c10 	.word	0x20000c10

08006e0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e14:	f7ff fa7e 	bl	8006314 <xTaskGetTickCount>
 8006e18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <prvSampleTimeNow+0x3c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d205      	bcs.n	8006e30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e24:	f000 f936 	bl	8007094 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e002      	b.n	8006e36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e36:	4a04      	ldr	r2, [pc, #16]	; (8006e48 <prvSampleTimeNow+0x3c>)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000c20 	.word	0x20000c20

08006e4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d812      	bhi.n	8006e98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	1ad2      	subs	r2, r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d302      	bcc.n	8006e86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e01b      	b.n	8006ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e86:	4b10      	ldr	r3, [pc, #64]	; (8006ec8 <prvInsertTimerInActiveList+0x7c>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7fe fa08 	bl	80052a6 <vListInsert>
 8006e96:	e012      	b.n	8006ebe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d206      	bcs.n	8006eae <prvInsertTimerInActiveList+0x62>
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d302      	bcc.n	8006eae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	e007      	b.n	8006ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eae:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <prvInsertTimerInActiveList+0x80>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4610      	mov	r0, r2
 8006eba:	f7fe f9f4 	bl	80052a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ebe:	697b      	ldr	r3, [r7, #20]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20000c14 	.word	0x20000c14
 8006ecc:	20000c10 	.word	0x20000c10

08006ed0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08e      	sub	sp, #56	; 0x38
 8006ed4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ed6:	e0ca      	b.n	800706e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da18      	bge.n	8006f10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ede:	1d3b      	adds	r3, r7, #4
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	61fb      	str	r3, [r7, #28]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f06:	6850      	ldr	r0, [r2, #4]
 8006f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f0a:	6892      	ldr	r2, [r2, #8]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f2c0 80aa 	blt.w	800706c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	3304      	adds	r3, #4
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe f9f5 	bl	8005318 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f2e:	463b      	mov	r3, r7
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff ff6b 	bl	8006e0c <prvSampleTimeNow>
 8006f36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b09      	cmp	r3, #9
 8006f3c:	f200 8097 	bhi.w	800706e <prvProcessReceivedCommands+0x19e>
 8006f40:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <prvProcessReceivedCommands+0x78>)
 8006f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f46:	bf00      	nop
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f71 	.word	0x08006f71
 8006f50:	08006f71 	.word	0x08006f71
 8006f54:	08006fe5 	.word	0x08006fe5
 8006f58:	08006ff9 	.word	0x08006ff9
 8006f5c:	08007043 	.word	0x08007043
 8006f60:	08006f71 	.word	0x08006f71
 8006f64:	08006f71 	.word	0x08006f71
 8006f68:	08006fe5 	.word	0x08006fe5
 8006f6c:	08006ff9 	.word	0x08006ff9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f76:	f043 0301 	orr.w	r3, r3, #1
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	18d1      	adds	r1, r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f90:	f7ff ff5c 	bl	8006e4c <prvInsertTimerInActiveList>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d069      	beq.n	800706e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d05e      	beq.n	800706e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	441a      	add	r2, r3
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc2:	f7ff fe05 	bl	8006bd0 <xTimerGenericCommand>
 8006fc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d14f      	bne.n	800706e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	61bb      	str	r3, [r7, #24]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ff6:	e03a      	b.n	800706e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ffe:	f043 0301 	orr.w	r3, r3, #1
 8007002:	b2da      	uxtb	r2, r3
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	617b      	str	r3, [r7, #20]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	699a      	ldr	r2, [r3, #24]
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	18d1      	adds	r1, r2, r3
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800703c:	f7ff ff06 	bl	8006e4c <prvInsertTimerInActiveList>
					break;
 8007040:	e015      	b.n	800706e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007052:	f000 fbdd 	bl	8007810 <vPortFree>
 8007056:	e00a      	b.n	800706e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	b2da      	uxtb	r2, r3
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800706a:	e000      	b.n	800706e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800706c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800706e:	4b08      	ldr	r3, [pc, #32]	; (8007090 <prvProcessReceivedCommands+0x1c0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	1d39      	adds	r1, r7, #4
 8007074:	2200      	movs	r2, #0
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fc16 	bl	80058a8 <xQueueReceive>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	f47f af2a 	bne.w	8006ed8 <prvProcessReceivedCommands+0x8>
	}
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	3730      	adds	r7, #48	; 0x30
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000c18 	.word	0x20000c18

08007094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800709a:	e048      	b.n	800712e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800709c:	4b2d      	ldr	r3, [pc, #180]	; (8007154 <prvSwitchTimerLists+0xc0>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a6:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <prvSwitchTimerLists+0xc0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe f92f 	bl	8005318 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d02e      	beq.n	800712e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4413      	add	r3, r2
 80070d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d90e      	bls.n	8007100 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ee:	4b19      	ldr	r3, [pc, #100]	; (8007154 <prvSwitchTimerLists+0xc0>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3304      	adds	r3, #4
 80070f6:	4619      	mov	r1, r3
 80070f8:	4610      	mov	r0, r2
 80070fa:	f7fe f8d4 	bl	80052a6 <vListInsert>
 80070fe:	e016      	b.n	800712e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007100:	2300      	movs	r3, #0
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	2300      	movs	r3, #0
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	2100      	movs	r1, #0
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff fd60 	bl	8006bd0 <xTimerGenericCommand>
 8007110:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	603b      	str	r3, [r7, #0]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <prvSwitchTimerLists+0xc0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1b1      	bne.n	800709c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <prvSwitchTimerLists+0xc0>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800713e:	4b06      	ldr	r3, [pc, #24]	; (8007158 <prvSwitchTimerLists+0xc4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a04      	ldr	r2, [pc, #16]	; (8007154 <prvSwitchTimerLists+0xc0>)
 8007144:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007146:	4a04      	ldr	r2, [pc, #16]	; (8007158 <prvSwitchTimerLists+0xc4>)
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	6013      	str	r3, [r2, #0]
}
 800714c:	bf00      	nop
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000c10 	.word	0x20000c10
 8007158:	20000c14 	.word	0x20000c14

0800715c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007162:	f000 f967 	bl	8007434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007166:	4b15      	ldr	r3, [pc, #84]	; (80071bc <prvCheckForValidListAndQueue+0x60>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d120      	bne.n	80071b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800716e:	4814      	ldr	r0, [pc, #80]	; (80071c0 <prvCheckForValidListAndQueue+0x64>)
 8007170:	f7fe f848 	bl	8005204 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007174:	4813      	ldr	r0, [pc, #76]	; (80071c4 <prvCheckForValidListAndQueue+0x68>)
 8007176:	f7fe f845 	bl	8005204 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <prvCheckForValidListAndQueue+0x6c>)
 800717c:	4a10      	ldr	r2, [pc, #64]	; (80071c0 <prvCheckForValidListAndQueue+0x64>)
 800717e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007180:	4b12      	ldr	r3, [pc, #72]	; (80071cc <prvCheckForValidListAndQueue+0x70>)
 8007182:	4a10      	ldr	r2, [pc, #64]	; (80071c4 <prvCheckForValidListAndQueue+0x68>)
 8007184:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007186:	2300      	movs	r3, #0
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <prvCheckForValidListAndQueue+0x74>)
 800718c:	4a11      	ldr	r2, [pc, #68]	; (80071d4 <prvCheckForValidListAndQueue+0x78>)
 800718e:	2110      	movs	r1, #16
 8007190:	200a      	movs	r0, #10
 8007192:	f7fe f953 	bl	800543c <xQueueGenericCreateStatic>
 8007196:	4603      	mov	r3, r0
 8007198:	4a08      	ldr	r2, [pc, #32]	; (80071bc <prvCheckForValidListAndQueue+0x60>)
 800719a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <prvCheckForValidListAndQueue+0x60>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d005      	beq.n	80071b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <prvCheckForValidListAndQueue+0x60>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	490b      	ldr	r1, [pc, #44]	; (80071d8 <prvCheckForValidListAndQueue+0x7c>)
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fd6c 	bl	8005c88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071b0:	f000 f970 	bl	8007494 <vPortExitCritical>
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000c18 	.word	0x20000c18
 80071c0:	20000be8 	.word	0x20000be8
 80071c4:	20000bfc 	.word	0x20000bfc
 80071c8:	20000c10 	.word	0x20000c10
 80071cc:	20000c14 	.word	0x20000c14
 80071d0:	20000cc4 	.word	0x20000cc4
 80071d4:	20000c24 	.word	0x20000c24
 80071d8:	08007af8 	.word	0x08007af8

080071dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3b04      	subs	r3, #4
 80071ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3b04      	subs	r3, #4
 80071fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f023 0201 	bic.w	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3b04      	subs	r3, #4
 800720a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800720c:	4a0c      	ldr	r2, [pc, #48]	; (8007240 <pxPortInitialiseStack+0x64>)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3b14      	subs	r3, #20
 8007216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3b04      	subs	r3, #4
 8007222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f06f 0202 	mvn.w	r2, #2
 800722a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3b20      	subs	r3, #32
 8007230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	08007245 	.word	0x08007245

08007244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800724e:	4b12      	ldr	r3, [pc, #72]	; (8007298 <prvTaskExitError+0x54>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007256:	d00a      	beq.n	800726e <prvTaskExitError+0x2a>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	60fb      	str	r3, [r7, #12]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <prvTaskExitError+0x28>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60bb      	str	r3, [r7, #8]
}
 8007280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007282:	bf00      	nop
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0fc      	beq.n	8007284 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800728a:	bf00      	nop
 800728c:	bf00      	nop
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	2000000c 	.word	0x2000000c
 800729c:	00000000 	.word	0x00000000

080072a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072a0:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <pxCurrentTCBConst2>)
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	6808      	ldr	r0, [r1, #0]
 80072a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	f380 8809 	msr	PSP, r0
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8811 	msr	BASEPRI, r0
 80072ba:	4770      	bx	lr
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst2>:
 80072c0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072c8:	4808      	ldr	r0, [pc, #32]	; (80072ec <prvPortStartFirstTask+0x24>)
 80072ca:	6800      	ldr	r0, [r0, #0]
 80072cc:	6800      	ldr	r0, [r0, #0]
 80072ce:	f380 8808 	msr	MSP, r0
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8814 	msr	CONTROL, r0
 80072da:	b662      	cpsie	i
 80072dc:	b661      	cpsie	f
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	df00      	svc	0
 80072e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ea:	bf00      	nop
 80072ec:	e000ed08 	.word	0xe000ed08

080072f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072f6:	4b46      	ldr	r3, [pc, #280]	; (8007410 <xPortStartScheduler+0x120>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a46      	ldr	r2, [pc, #280]	; (8007414 <xPortStartScheduler+0x124>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10a      	bne.n	8007316 <xPortStartScheduler+0x26>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	613b      	str	r3, [r7, #16]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007316:	4b3e      	ldr	r3, [pc, #248]	; (8007410 <xPortStartScheduler+0x120>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a3f      	ldr	r2, [pc, #252]	; (8007418 <xPortStartScheduler+0x128>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d10a      	bne.n	8007336 <xPortStartScheduler+0x46>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007336:	4b39      	ldr	r3, [pc, #228]	; (800741c <xPortStartScheduler+0x12c>)
 8007338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	22ff      	movs	r2, #255	; 0xff
 8007346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007358:	b2da      	uxtb	r2, r3
 800735a:	4b31      	ldr	r3, [pc, #196]	; (8007420 <xPortStartScheduler+0x130>)
 800735c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800735e:	4b31      	ldr	r3, [pc, #196]	; (8007424 <xPortStartScheduler+0x134>)
 8007360:	2207      	movs	r2, #7
 8007362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007364:	e009      	b.n	800737a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007366:	4b2f      	ldr	r3, [pc, #188]	; (8007424 <xPortStartScheduler+0x134>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3b01      	subs	r3, #1
 800736c:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <xPortStartScheduler+0x134>)
 800736e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b80      	cmp	r3, #128	; 0x80
 8007384:	d0ef      	beq.n	8007366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007386:	4b27      	ldr	r3, [pc, #156]	; (8007424 <xPortStartScheduler+0x134>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1c3 0307 	rsb	r3, r3, #7
 800738e:	2b04      	cmp	r3, #4
 8007390:	d00a      	beq.n	80073a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	60bb      	str	r3, [r7, #8]
}
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073a8:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <xPortStartScheduler+0x134>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <xPortStartScheduler+0x134>)
 80073b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073b2:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <xPortStartScheduler+0x134>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073ba:	4a1a      	ldr	r2, [pc, #104]	; (8007424 <xPortStartScheduler+0x134>)
 80073bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073c6:	4b18      	ldr	r3, [pc, #96]	; (8007428 <xPortStartScheduler+0x138>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a17      	ldr	r2, [pc, #92]	; (8007428 <xPortStartScheduler+0x138>)
 80073cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073d2:	4b15      	ldr	r3, [pc, #84]	; (8007428 <xPortStartScheduler+0x138>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a14      	ldr	r2, [pc, #80]	; (8007428 <xPortStartScheduler+0x138>)
 80073d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073de:	f000 f8dd 	bl	800759c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <xPortStartScheduler+0x13c>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073e8:	f000 f8fc 	bl	80075e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073ec:	4b10      	ldr	r3, [pc, #64]	; (8007430 <xPortStartScheduler+0x140>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a0f      	ldr	r2, [pc, #60]	; (8007430 <xPortStartScheduler+0x140>)
 80073f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073f8:	f7ff ff66 	bl	80072c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073fc:	f7ff f854 	bl	80064a8 <vTaskSwitchContext>
	prvTaskExitError();
 8007400:	f7ff ff20 	bl	8007244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	e000ed00 	.word	0xe000ed00
 8007414:	410fc271 	.word	0x410fc271
 8007418:	410fc270 	.word	0x410fc270
 800741c:	e000e400 	.word	0xe000e400
 8007420:	20000d14 	.word	0x20000d14
 8007424:	20000d18 	.word	0x20000d18
 8007428:	e000ed20 	.word	0xe000ed20
 800742c:	2000000c 	.word	0x2000000c
 8007430:	e000ef34 	.word	0xe000ef34

08007434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	607b      	str	r3, [r7, #4]
}
 800744c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800744e:	4b0f      	ldr	r3, [pc, #60]	; (800748c <vPortEnterCritical+0x58>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	4a0d      	ldr	r2, [pc, #52]	; (800748c <vPortEnterCritical+0x58>)
 8007456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <vPortEnterCritical+0x58>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d10f      	bne.n	8007480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <vPortEnterCritical+0x5c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <vPortEnterCritical+0x4c>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	603b      	str	r3, [r7, #0]
}
 800747c:	bf00      	nop
 800747e:	e7fe      	b.n	800747e <vPortEnterCritical+0x4a>
	}
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	2000000c 	.word	0x2000000c
 8007490:	e000ed04 	.word	0xe000ed04

08007494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800749a:	4b12      	ldr	r3, [pc, #72]	; (80074e4 <vPortExitCritical+0x50>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <vPortExitCritical+0x24>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	607b      	str	r3, [r7, #4]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <vPortExitCritical+0x50>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	4a09      	ldr	r2, [pc, #36]	; (80074e4 <vPortExitCritical+0x50>)
 80074c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074c2:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <vPortExitCritical+0x50>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d105      	bne.n	80074d6 <vPortExitCritical+0x42>
 80074ca:	2300      	movs	r3, #0
 80074cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f383 8811 	msr	BASEPRI, r3
}
 80074d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	2000000c 	.word	0x2000000c
	...

080074f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074f0:	f3ef 8009 	mrs	r0, PSP
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4b15      	ldr	r3, [pc, #84]	; (8007550 <pxCurrentTCBConst>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	f01e 0f10 	tst.w	lr, #16
 8007500:	bf08      	it	eq
 8007502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	6010      	str	r0, [r2, #0]
 800750c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007514:	f380 8811 	msr	BASEPRI, r0
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f7fe ffc2 	bl	80064a8 <vTaskSwitchContext>
 8007524:	f04f 0000 	mov.w	r0, #0
 8007528:	f380 8811 	msr	BASEPRI, r0
 800752c:	bc09      	pop	{r0, r3}
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	6808      	ldr	r0, [r1, #0]
 8007532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007536:	f01e 0f10 	tst.w	lr, #16
 800753a:	bf08      	it	eq
 800753c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007540:	f380 8809 	msr	PSP, r0
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst>:
 8007550:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007572:	f7fe fedf 	bl	8006334 <xTaskIncrementTick>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <xPortSysTickHandler+0x40>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f383 8811 	msr	BASEPRI, r3
}
 800758e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <vPortSetupTimerInterrupt+0x38>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <vPortSetupTimerInterrupt+0x3c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <vPortSetupTimerInterrupt+0x40>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <vPortSetupTimerInterrupt+0x44>)
 80075ba:	3b01      	subs	r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075be:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	e000e010 	.word	0xe000e010
 80075d4:	e000e018 	.word	0xe000e018
 80075d8:	20000000 	.word	0x20000000
 80075dc:	10624dd3 	.word	0x10624dd3
 80075e0:	e000e014 	.word	0xe000e014

080075e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075f4 <vPortEnableVFP+0x10>
 80075e8:	6801      	ldr	r1, [r0, #0]
 80075ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ee:	6001      	str	r1, [r0, #0]
 80075f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075f2:	bf00      	nop
 80075f4:	e000ed88 	.word	0xe000ed88

080075f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075fe:	f3ef 8305 	mrs	r3, IPSR
 8007602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b0f      	cmp	r3, #15
 8007608:	d914      	bls.n	8007634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800760a:	4a17      	ldr	r2, [pc, #92]	; (8007668 <vPortValidateInterruptPriority+0x70>)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007614:	4b15      	ldr	r3, [pc, #84]	; (800766c <vPortValidateInterruptPriority+0x74>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	7afa      	ldrb	r2, [r7, #11]
 800761a:	429a      	cmp	r2, r3
 800761c:	d20a      	bcs.n	8007634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
 8007632:	e7fe      	b.n	8007632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007634:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <vPortValidateInterruptPriority+0x78>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800763c:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <vPortValidateInterruptPriority+0x7c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d90a      	bls.n	800765a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	603b      	str	r3, [r7, #0]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <vPortValidateInterruptPriority+0x60>
	}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	e000e3f0 	.word	0xe000e3f0
 800766c:	20000d14 	.word	0x20000d14
 8007670:	e000ed0c 	.word	0xe000ed0c
 8007674:	20000d18 	.word	0x20000d18

08007678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	; 0x28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007680:	2300      	movs	r3, #0
 8007682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007684:	f7fe fd9a 	bl	80061bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007688:	4b5b      	ldr	r3, [pc, #364]	; (80077f8 <pvPortMalloc+0x180>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007690:	f000 f920 	bl	80078d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007694:	4b59      	ldr	r3, [pc, #356]	; (80077fc <pvPortMalloc+0x184>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4013      	ands	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	f040 8093 	bne.w	80077c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01d      	beq.n	80076e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076a8:	2208      	movs	r2, #8
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d014      	beq.n	80076e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f023 0307 	bic.w	r3, r3, #7
 80076c0:	3308      	adds	r3, #8
 80076c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <pvPortMalloc+0x6c>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	617b      	str	r3, [r7, #20]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d06e      	beq.n	80077c8 <pvPortMalloc+0x150>
 80076ea:	4b45      	ldr	r3, [pc, #276]	; (8007800 <pvPortMalloc+0x188>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d869      	bhi.n	80077c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076f4:	4b43      	ldr	r3, [pc, #268]	; (8007804 <pvPortMalloc+0x18c>)
 80076f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076f8:	4b42      	ldr	r3, [pc, #264]	; (8007804 <pvPortMalloc+0x18c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076fe:	e004      	b.n	800770a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d903      	bls.n	800771c <pvPortMalloc+0xa4>
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f1      	bne.n	8007700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800771c:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <pvPortMalloc+0x180>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007722:	429a      	cmp	r2, r3
 8007724:	d050      	beq.n	80077c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2208      	movs	r2, #8
 800772c:	4413      	add	r3, r2
 800772e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	2308      	movs	r3, #8
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	429a      	cmp	r2, r3
 8007746:	d91f      	bls.n	8007788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4413      	add	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <pvPortMalloc+0xf8>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	613b      	str	r3, [r7, #16]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007782:	69b8      	ldr	r0, [r7, #24]
 8007784:	f000 f908 	bl	8007998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007788:	4b1d      	ldr	r3, [pc, #116]	; (8007800 <pvPortMalloc+0x188>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <pvPortMalloc+0x188>)
 8007794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007796:	4b1a      	ldr	r3, [pc, #104]	; (8007800 <pvPortMalloc+0x188>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	4b1b      	ldr	r3, [pc, #108]	; (8007808 <pvPortMalloc+0x190>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d203      	bcs.n	80077aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077a2:	4b17      	ldr	r3, [pc, #92]	; (8007800 <pvPortMalloc+0x188>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a18      	ldr	r2, [pc, #96]	; (8007808 <pvPortMalloc+0x190>)
 80077a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	4b13      	ldr	r3, [pc, #76]	; (80077fc <pvPortMalloc+0x184>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <pvPortMalloc+0x194>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3301      	adds	r3, #1
 80077c4:	4a11      	ldr	r2, [pc, #68]	; (800780c <pvPortMalloc+0x194>)
 80077c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077c8:	f7fe fd06 	bl	80061d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <pvPortMalloc+0x174>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60fb      	str	r3, [r7, #12]
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <pvPortMalloc+0x172>
	return pvReturn;
 80077ec:	69fb      	ldr	r3, [r7, #28]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3728      	adds	r7, #40	; 0x28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20004924 	.word	0x20004924
 80077fc:	20004938 	.word	0x20004938
 8007800:	20004928 	.word	0x20004928
 8007804:	2000491c 	.word	0x2000491c
 8007808:	2000492c 	.word	0x2000492c
 800780c:	20004930 	.word	0x20004930

08007810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d04d      	beq.n	80078be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007822:	2308      	movs	r3, #8
 8007824:	425b      	negs	r3, r3
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	4413      	add	r3, r2
 800782a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	4b24      	ldr	r3, [pc, #144]	; (80078c8 <vPortFree+0xb8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4013      	ands	r3, r2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <vPortFree+0x44>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	60fb      	str	r3, [r7, #12]
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <vPortFree+0x62>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	60bb      	str	r3, [r7, #8]
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <vPortFree+0xb8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4013      	ands	r3, r2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01e      	beq.n	80078be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11a      	bne.n	80078be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <vPortFree+0xb8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	43db      	mvns	r3, r3
 8007892:	401a      	ands	r2, r3
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007898:	f7fe fc90 	bl	80061bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <vPortFree+0xbc>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4413      	add	r3, r2
 80078a6:	4a09      	ldr	r2, [pc, #36]	; (80078cc <vPortFree+0xbc>)
 80078a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078aa:	6938      	ldr	r0, [r7, #16]
 80078ac:	f000 f874 	bl	8007998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <vPortFree+0xc0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	4a06      	ldr	r2, [pc, #24]	; (80078d0 <vPortFree+0xc0>)
 80078b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078ba:	f7fe fc8d 	bl	80061d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078be:	bf00      	nop
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20004938 	.word	0x20004938
 80078cc:	20004928 	.word	0x20004928
 80078d0:	20004934 	.word	0x20004934

080078d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80078de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078e0:	4b27      	ldr	r3, [pc, #156]	; (8007980 <prvHeapInit+0xac>)
 80078e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00c      	beq.n	8007908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3307      	adds	r3, #7
 80078f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0307 	bic.w	r3, r3, #7
 80078fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	4a1f      	ldr	r2, [pc, #124]	; (8007980 <prvHeapInit+0xac>)
 8007904:	4413      	add	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800790c:	4a1d      	ldr	r2, [pc, #116]	; (8007984 <prvHeapInit+0xb0>)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007912:	4b1c      	ldr	r3, [pc, #112]	; (8007984 <prvHeapInit+0xb0>)
 8007914:	2200      	movs	r2, #0
 8007916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	4413      	add	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007920:	2208      	movs	r2, #8
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0307 	bic.w	r3, r3, #7
 800792e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4a15      	ldr	r2, [pc, #84]	; (8007988 <prvHeapInit+0xb4>)
 8007934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <prvHeapInit+0xb4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800793e:	4b12      	ldr	r3, [pc, #72]	; (8007988 <prvHeapInit+0xb4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007954:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <prvHeapInit+0xb4>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	4a0a      	ldr	r2, [pc, #40]	; (800798c <prvHeapInit+0xb8>)
 8007962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4a09      	ldr	r2, [pc, #36]	; (8007990 <prvHeapInit+0xbc>)
 800796a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800796c:	4b09      	ldr	r3, [pc, #36]	; (8007994 <prvHeapInit+0xc0>)
 800796e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007972:	601a      	str	r2, [r3, #0]
}
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	20000d1c 	.word	0x20000d1c
 8007984:	2000491c 	.word	0x2000491c
 8007988:	20004924 	.word	0x20004924
 800798c:	2000492c 	.word	0x2000492c
 8007990:	20004928 	.word	0x20004928
 8007994:	20004938 	.word	0x20004938

08007998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079a0:	4b28      	ldr	r3, [pc, #160]	; (8007a44 <prvInsertBlockIntoFreeList+0xac>)
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e002      	b.n	80079ac <prvInsertBlockIntoFreeList+0x14>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d8f7      	bhi.n	80079a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4413      	add	r3, r2
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d108      	bne.n	80079da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	441a      	add	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	441a      	add	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d118      	bne.n	8007a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <prvInsertBlockIntoFreeList+0xb0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d00d      	beq.n	8007a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	441a      	add	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	e008      	b.n	8007a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a16:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <prvInsertBlockIntoFreeList+0xb0>)
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	e003      	b.n	8007a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d002      	beq.n	8007a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	2000491c 	.word	0x2000491c
 8007a48:	20004924 	.word	0x20004924

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4d0d      	ldr	r5, [pc, #52]	; (8007a84 <__libc_init_array+0x38>)
 8007a50:	4c0d      	ldr	r4, [pc, #52]	; (8007a88 <__libc_init_array+0x3c>)
 8007a52:	1b64      	subs	r4, r4, r5
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	2600      	movs	r6, #0
 8007a58:	42a6      	cmp	r6, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	4d0b      	ldr	r5, [pc, #44]	; (8007a8c <__libc_init_array+0x40>)
 8007a5e:	4c0c      	ldr	r4, [pc, #48]	; (8007a90 <__libc_init_array+0x44>)
 8007a60:	f000 f82e 	bl	8007ac0 <_init>
 8007a64:	1b64      	subs	r4, r4, r5
 8007a66:	10a4      	asrs	r4, r4, #2
 8007a68:	2600      	movs	r6, #0
 8007a6a:	42a6      	cmp	r6, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a74:	4798      	blx	r3
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7e:	4798      	blx	r3
 8007a80:	3601      	adds	r6, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	08007b68 	.word	0x08007b68
 8007a88:	08007b68 	.word	0x08007b68
 8007a8c:	08007b68 	.word	0x08007b68
 8007a90:	08007b6c 	.word	0x08007b6c

08007a94 <memcpy>:
 8007a94:	440a      	add	r2, r1
 8007a96:	4291      	cmp	r1, r2
 8007a98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a9c:	d100      	bne.n	8007aa0 <memcpy+0xc>
 8007a9e:	4770      	bx	lr
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aaa:	4291      	cmp	r1, r2
 8007aac:	d1f9      	bne.n	8007aa2 <memcpy+0xe>
 8007aae:	bd10      	pop	{r4, pc}

08007ab0 <memset>:
 8007ab0:	4402      	add	r2, r0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d100      	bne.n	8007aba <memset+0xa>
 8007ab8:	4770      	bx	lr
 8007aba:	f803 1b01 	strb.w	r1, [r3], #1
 8007abe:	e7f9      	b.n	8007ab4 <memset+0x4>

08007ac0 <_init>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr

08007acc <_fini>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	bf00      	nop
 8007ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad2:	bc08      	pop	{r3}
 8007ad4:	469e      	mov	lr, r3
 8007ad6:	4770      	bx	lr
